"dbinom(0:5, size=5,
prob=0.995)"
if(J==2) txt=
"dbinom(0:20, size=20,
prob=0.943)"
Yy = yo+0.4*Y
text(0.99*P.U+ifelse(J==2,0.1,0),Yy,txt,
col="red",adj=c(1,1),family="mono",cex=0.65)
points(p.O,yo-0.05*Y,cex=0.75,pch=19)
# text( sum(dbinom(4:5,5,0.283))
text(0.98*p.O,yo+0.18*Y,"2.5%",col="red",
cex=0.8,adj=c(1,1))
text(1.02*p.O,yo+0.18*Y,"2.5%",col="blue",
cex=0.8,adj=c(0,1))
} # end J
} # end wilsonCP
qnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25)
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25)
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot")
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw()
library(mosaic)
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw()
gg_sy <- theme(legend.position = "bottom", axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
library(mosaic)
gg_sy <- theme(legend.position = "bottom", axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy
library(mosaic)
gg_sy <- theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy
gg_sy <- theme(legend.position = "bottom", axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_grey()
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_manual(values = c("grey60","black", "grey60"))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_manual(values = c("black","grey60", "black"))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_manual(values = c("black","grey60", "black")) +
scale_x_continuous()
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_manual(values = c("black","grey60", "black")) +
scale_x_continuous(breaks = seq(60, 71, 1))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_manual(values = c("black","grey60", "black")) +
scale_x_continuous(breaks = seq(59, 71, 1))
mosaic::xqnorm(p = c(0.025, 0.975), mean = 65.3, sd = 1.25, return = "plot") +
theme_bw() + gg_sy + scale_fill_manual(values = c("black","grey60", "black")) +
scale_x_continuous(breaks = seq(59, 71, .5))
df <- as.data.frame(rbind(
c("1. Final exam date: December 6th, Otto MAASS 112 (cap 220) available from 9am-6pm "),
c("2. [Inference about a population rate](https://github.com/sahirbhatnagar/EPIB607/raw/master/slides/one_sample_rate/EPIB607_one_sample_rate.pdf)")
))
df %>% kable(col.names = NULL) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
library(mosaic)
df <- as.data.frame(rbind(
c("1. Final exam date: December 6th, Otto MAASS 112 (cap 220) available from 9am-6pm "),
c("2. [Inference about a population rate](https://github.com/sahirbhatnagar/EPIB607/raw/master/slides/one_sample_rate/EPIB607_one_sample_rate.pdf)")
))
df %>% kable(col.names = NULL) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
mosaic::xqpois(c(0.025, 0.975), lambda = 6)
mosaic::xqpois(c(0.025, 0.975), lambda = 60)
mosaic::xqpois(c(0.025, 0.975), lambda = 70)
mosaic::xqpois(c(0.025, 0.975), lambda = 100)
mosaic::xqpois(c(0.025, 0.975), lambda = 120)
mosaic::xqpois(c(0.025, 0.975), lambda = 150)
174-126
manipulate::manipulate(
mosaic::xqpois(c(0.025, 0.975), lambda = LAMBDA),
LAMBDA = manipulate::slider(1, 200, step = 1))
poisson.test(150)
mosaic::xqpois(c(0.025, 0.975), lambda = 150)
manipulate::manipulate(
mosaic::xqpois(c(0.025, 0.975), lambda = LAMBDA),
LAMBDA = manipulate::slider(1, 200, step = .1))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
mosaic::xqnorm(c(0.025, 0.975), mean = 30, sd = sqrt(30))
qgamma(c(0.025, 0.975), c(30,31))
mosaic::xqnorm(c(0.025, 0.975), mean = 100, sd = sqrt(100))
qgamma(c(0.025, 0.975), c(100,101))
mosaic::xqnorm(c(0.025, 0.975), mean = 150, sd = sqrt(150))
qgamma(c(0.025, 0.975), c(150,151))
16/20
library(mosaic)
mosaicData::HELPrct
mosaicData::HELPrct %>% colnames
mosaicData::HELPrct %>% head
dt <- mosaicData::HELPrct
dput(colnames(dt))
dt
dt$sexrisk %>% table
dt <- mosaicData::HELPrct[, c("id","age", "cesd","substance","mcs","sexrisk")]
dt
knitr::kable(head(dt))
library(mosaic)
dt <- mosaicData::HELPrct[, c("id","age", "cesd","substance","mcs","sexrisk")]
knitr::kable(head(dt))
data("HELPfull")
knitr::kable(dt[1:5,])
summary(dt)
range(dt$cesd)
range(dt$mcs)
120/18
pbinom(q = 13, 20, 0.5, lower.tail = F)
pbinom(q = 12, 20, 0.5, lower.tail = F)
fit <- glm(cbind(13,7) ~ 1, family = binomial)
summary(fit)
binom.test(13,20)
confint(git)
confint(fit)
plogis(confint(fit))
binom.test(13,20, method = "Clopper")
pbinom(0.8460908, 20, 0.5, lower.tail = F)
qbinom(0.975, 20, 0.8460908)
qbinom(0.025, 20, 0.4078115)
pbinom(12, 20, 0.5, lower.tail = FALSE)
pbinom(12, 20, 0.5, lower.tail = FALSE)*2
(1-pbinom(12, 20, 0.5, lower.tail = FALSE))
(1-pbinom(12, 20, 0.5))
(1-pbinom(12, 20, 0.5))*2
qnorm(c(0.025, 0.975), mean = 13/20, sd = sqrt((13/20)*(7/20)/20))
binom.test(13,20, method = "Wald")
mosaic::binom.test(13,20, ci.method = "Wald")
qnorm(c(0.025, 0.975), mean = 13/20, sd = sqrt((13/20)*(7/20)/20))
pbinom(12, 20, 0.5, lower.tail = FALSE)*2
SEp <- sqrt(0.65*0.35/20)
zstat <- (0.65 - 0.5) / SEp
pnorm(zstat, lower.tail = FALSE) * 2
SEp <- sqrt(0.5*0.5/20) # under the null
zstat <- (0.65 - 0.5) / SEp
pnorm(zstat, lower.tail = FALSE) * 2
zstat
SEp <- sqrt(0.5*0.5/20) # under the null
zstat <- (0.65 - 0.5) / SEp
pnorm(1.34, lower.tail = FALSE) * 2
3*96*3+1
qnorm(0.025)
6+5+6+5+6+7+6+5+8+6+6+10+3+4+6+6
#one sided test, less than
n_step <- 25
s_step <- 60
mu_step <- 500
se_step <- s_step/sqrt(n_step)
#rearrage t = (ybar-mu)/SE to find ybar
min_crit_step <- qt(0.01, df = 24, lower.tail=TRUE)*se_step + mu_step
min_crit_step
source("https://raw.githubusercontent.com/sahirbhatnagar/EPIB607/master/assignments/a6/plot_null_alt.R")
mu0 <- 500
mha <- 470
cutoff <- mu0 + qnorm(0.01) * step_s / sqrt(step_n)
source("https://raw.githubusercontent.com/sahirbhatnagar/EPIB607/master/assignments/a6/plot_null_alt.R")
step_s <- 60
step_n <- 25
step_critv <- xqnorm(p = 0.01, mean = 500, sd = step_s/sqrt(step_n))
step_critvdisp <- round(step_critv, 2)
step_prob <- round(xpnorm(q = step_critv, mean = 470, sd = step_s/sqrt(step_n)), 2)
mu0 <- 500
mha <- 470
## ---- Question-1 ------------------------------------------------------------
library(mosaic)
step_s <- 60
step_n <- 25
step_critv <- xqnorm(p = 0.01, mean = 500, sd = step_s/sqrt(step_n))
step_critvdisp <- round(step_critv, 2)
step_prob <- round(xpnorm(q = step_critv, mean = 470, sd = step_s/sqrt(step_n)), 2)
mu0 <- 500
mha <- 470
cutoff <- mu0 + qnorm(0.01) * step_s / sqrt(step_n)
source("https://raw.githubusercontent.com/sahirbhatnagar/EPIB607/master/assignments/a6/plot_null_alt.R")
power_plot(n = 41, s = step_s,
mu0 = mu0,
mha = mha,
cutoff = mu0 + qnorm(0.01) * step_s / sqrt(41),
alternative = "less",
xlab = "Steps")
## ....or just calculate it
step_nforpower <- ceiling((-xqnorm(p = 0.01) + xqnorm(p = 0.8))^2 * (step_s/(470-500))^2)
step_nforpower
power_plot(n = 41, s = step_s,
mu0 = mu0,
mha = mha,
cutoff = mu0 + qnorm(0.01) * step_s / sqrt(41),
alternative = "less",
xlab = "Steps")
## ---- Question-1 ------------------------------------------------------------
library(mosaic)
step_s <- 60
step_n <- 25
step_critv <- xqnorm(p = 0.01, mean = 500, sd = step_s/sqrt(step_n))
step_critvdisp <- round(step_critv, 2)
step_prob <- round(xpnorm(q = step_critv, mean = 470, sd = step_s/sqrt(step_n)), 2)
step_prob
power = pnorm(-.5366, mean = -.5346, sd = 0.008/sqrt(15), lower.tail= FALSE)
power
6+6+5+6+6+7+
3+6+5+8+8+10+6+10
horsekicks <- read.csv("horsekicks.csv")
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv")
head(horsekicks)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv",
sep = " ")
head(horsekicks)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv",
sep = " ")
head(horsekicks)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv",
sep = " ", row.names = FALSE)
head(horsekicks)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv",
sep = " ", row.names = FALSE)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv",
sep = " ")
head(horsekicks)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv",
sep = " ")
head(horsekicks)
poisson.test(horsekicks$total)
horsekicks$total
poisson.test(horsekicks$total)
stats::poisson.test(horsekicks$total)
stats::poisson.test(horsekicks$total, horsekicks$year)
horsekicks$total
head(horsekicks)
horsekicks
stats::poisson.test(mean(horsekicks$total))
mean(horsekicks$total)
stats::poisson.test(mean(horsekicks$total))
sum(horsekicks$total)
diff(horsekicks$year)
range(horsekicks$year)
diff(range(horsekicks$year))
stats::poisson.test(sum(horsekicks$total), diff(range(horsekicks$year)))
196/19
qgamma(c(0.025, 0.975), shape = c(196, 197))
qgamma(c(0.025, 0.975), shape = c(196, 197))/10
qgamma(c(0.025, 0.975), shape = c(196, 197))/19
mean(horsekicks$total)
sd(horsekicks$total)
var(horsekicks$total)
poisson.test(x = 0, 1084)
qgamma(c(0.025, 0.975), shape = c(0, 1))/1084
tt <- rep(0, 768)
tt
mean(tt)
sd(tt)
qgamma(c(0.025, 0.975), shape = c(24, 25))
PT <- 2159
y <- 24
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
bootstrap <- do(4000) * sum( resample(e) )
quantile(bootstrap$sum, probs=c(0.025,0.975))
bootstrap <- do(4000) * sum( resample(e) )
quantile(bootstrap$sum, probs = c(0.025,0.975))
bootstrap <- do(4000) * sum( resample(e) )
quantile(bootstrap$sum, probs = c(0.025,0.975))
qpois(0.025, 24)
qpois(0.975, 24)
PT <- 2157
y <- 24
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
bootstrap <- do(5000) * sum( resample(e) )
quantile(bootstrap$sum, probs = c(0.025,0.975))
qpois(0.025, 24)
qpois(0.975, 24)
quantile(bootstrap$sum, probs = c(0.025,0.975))
bootstrap
head(bootstrap)
e
PT <- 2159
y <- 24
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
bootstrap <- do(5000) * sum( resample(e) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025,0.975))
qpois(0.025, 24)
qpois(0.975, 24)
bootstrap <- do(4000) * sum( resample(e) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025,0.975))
qpois(0.025, 24)
qpois(0.975, 24)
# upper limit
PT <- 2159 * 100
y <- 33 * 100
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
bootstrap <- do(4000) * sum( resample(e) )
bootstrap <- do(4000) * sum( resample(e, size = PT) )
bootstrap <- do(4000) * sum( resample(e, size = PT / 100) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025,0.975))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025,0.975))
# upper limit
PT <- 2159 * 100
y <- 34 * 100
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
# upper limit
PT <- 2159 * 100
y <- 34 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
# upper limit
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
# upper limit
PT <- 2159 * 100
y <- 35 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
# upper limit
PT <- 2159 * 100
y <- 35 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(1000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(5000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(5000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(5000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
PT <- 2159 * 100
y <- 35.5 * 100
e <- c(rep(0, PT-y), rep(1, y))
bootstrap <- do(5000) * sum( resample(e, size = PT / 100) )
quantile(bootstrap$sum, probs = c(0.025))
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
p
dt <- data.frame(events = c(0, 41), pt = c(1084, 1076.9))
dt
dt <- data.frame(events = c(0, 41), pt = c(1084, 1076.9), vaccine = 1:0)
fit <- glm(events ~ vaccine, offset = pt, data = dt, family = poisson(link=log))
summary(fit)
fit <- glm(events ~ vaccine, offset = log(pt), data = dt, family = poisson(link=log))
summary(fit)
dt
fit <- glm(events ~ vaccine + offset(log(pt)), data = dt, family = poisson(link=log))
summary(fit)
fit <- glm(events ~ vaccine + offset(log(pt)), data = dt, family = poisson(link=identity))
fit <- glm(events ~ vaccine + offset(pt), data = dt, family = poisson(link=identity))
fit <- glm(events ~ vaccine - 1 , offset = log(pt), data = dt, family = poisson)
summary(fit)
fit <- glm(events ~ vaccine - 1 , offset = pt, data = dt, family = poisson)
fit <- glm(events ~ vaccine - 1 , offset = log(pt), data = dt, family = poisson)
summary(fit)
dt <- data.frame(events = c(41, 0), pt = c(1076.9, 1084), arm = factor(c("placebo","vaccine")))
dt
str(dt)
fit <- glm(events ~ vaccine, offset = log(pt), data = dt, family = poisson)
fit <- glm(events ~ arm, offset = log(pt), data = dt, family = poisson)
summary(fit)
# traditional way. doesnt work
PT <- 2159
y <- 24
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
bootstrap <- do(4000) * sum( resample(e) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025,0.975))
# traditional way. doesnt work
PT <- 2159
y <- 24
e <- c(rep(0, PT-y), rep(1, y))
library(mosaic)
bootstrap <- do(4000) * sum( resample(e) )
head(bootstrap)
quantile(bootstrap$sum, probs = c(0.025,0.975))
qpois(0.025, 24)
qpois(0.975, 24)
qpois(0.025, 24)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv", sep = " ")
head(horsekicks)
table(horsekicks$total)
horsekicks
View(horsekicks)
horsekicks <- read.csv("~/git_repositories/epib607/assignments/a7/horsekicks.csv", sep = " ")
head(horsekicks)
manipulate::manipulate(
mosaic::xqpois(c(0.025, 0.975), lambda = LAMBDA),
LAMBDA = manipulate::slider(1, 200, step = 1))
manipulate::manipulate(
mosaic::xqpois(c(0.025, 0.975), lambda = LAMBDA),
LAMBDA = manipulate::slider(1, 300, step = 1))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
manipulate::manipulate(
mosaic::xqpois(c(0.025, 0.975), lambda = LAMBDA),
LAMBDA = manipulate::slider(1, 300, step = .1))
mosaic::xppois(2, 0.57, lower.tail = FALSE)
mosaic::xppois(2, lambda = 0.57, lower.tail = FALSE)
mosaic::xppois(1, lambda = 0.57, lower.tail = FALSE)
