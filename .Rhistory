x <- rnorm(n, 1) + rnorm(n, 10)
hist(x)
x <- rnorm(n, 1, sd = 0.2) + rnorm(n, 10, sd = 0.5)
hist(x)
x <- rgamma(n, 7, 0.5) + rnorm(n, 10, sd = 0.5)
hist(x)
x <- rnorm(n, 0.5, 0.2) + rnorm(n, 70, sd = 0.5)
hist(x)
x <- rnorm(n, 0.5, 0.2) + rnorm(n, 70, sd = 0.05)
hist(x)
n=1e5
x <- c(rnorm(n, 1),rnorm(n, 10))
hist(x)
boneloss <- read.csv("https://github.com/sahirbhatnagar/EPIB607/raw/master/data/boneloss.csv")
rmarkdown::pdf_document()
head(boneloss)
library(mosaic)
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss)
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_classic()
gg_sy <- theme(legend.position = "bottom", axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
library(ggplot2)
gg_sy <- theme(legend.position = "bottom", axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_classic() + gg_sy
mosaic::fav_stats(mineral_loss ~ type, data = boneloss)
mosaic::fav_stats(mineral_loss, data = boneloss)
boneloss <- read.csv("https://github.com/sahirbhatnagar/EPIB607/raw/master/data/boneloss.csv")
mosaic::favstats(mineral_loss ~ type, data = boneloss)
mosaic::IQR(mineral_loss ~ type, data = boneloss)
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_bw() + gg_sy
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_bw() + gg_sy + theme_linedraw()
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_linedraw() + gg_sy
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_linedraw() + gg_sy + xlab("Group") + ylab("Mineral Loss")
ggformula::gf_boxplot(mineral_loss ~ type, data = boneloss) + theme_linedraw() + gg_sy + xlab("group") + ylab("mineral loss")
sqrt(400)
25/20
3384/12
rweibull(1000, 1.5, 1) %>% hist
rweibull(1000, 1.5, 1) %>% density()
rweibull(1000, 1.5, 1) %>% density() %>% plot
rweibull(1000, 4, 2) %>% density() %>% plot
rweibull(1000, 6, 2) %>% density() %>% plot
rweibull(1000, 1.5, 1) %>% hist
rweibull(1000, 6, 2) %>% hist
rweibull(1000, 8, 2) %>% hist
rweibull(1000, 8, 2) %>% hist(breaks = 30)
rweibull(1000, 8, 1) %>% hist(breaks = 30)
rweibull(1000, 10, 1) %>% hist(breaks = 30)
rweibull(1000, 1.5, 1) %>% hist
rweibull(1000, 1.5, 1) %>% hist(breaks=30)
rweibull(1000, 10, 1) %>% hist(breaks = 30)
set.seed(10234)
par(mfrow=c(1,2))
rweibull(1000, 1.5, 1) %>% hist(breaks=30)
rweibull(1000, 10, 1) %>% hist(breaks = 30)
set.seed(10234)
par(mfrow=c(1,2))
x <- rweibull(1000, 1.5, 1)
y <- rweibull(1000, 10, 1)
x %>% hist(breaks=30)
y %>% hist(breaks=30)
favstats(x)
favstats(y)
set.seed(10234)
par(mfrow=c(1,2))
x <- rweibull(1000, 10, 1)
y <- rweibull(1000, 1.5, 1)
x %>% hist(breaks=30, main = "long left tail")
y %>% hist(breaks=30, main = "long right tail")
favstats(x)
favstats(y)
set.seed(10234)
par(mfrow=c(1,2))
x <- rweibull(1000, 4, 2)
y <- rweibull(1000, 1.5, 1)
x %>% hist(breaks=30, main = "long left tail")
y %>% hist(breaks=30, main = "long right tail")
favstats(x)
favstats(y)
xlims <- range(x,y)
x <- rweibull(1000, 4, 2)
y <- rweibull(1000, 1.5, 1)
xlims <- range(x,y)
pretty(xlims)
x %>% hist(breaks=30, main = "long left tail", xlim = pretty(xlims))
set.seed(10234)
par(mfrow=c(1,2))
x <- rweibull(1000, 4, 2)
y <- rweibull(1000, 1.5, 1)
xlims <- range(x,y)
x %>% hist(breaks=30, main = "long left tail", xlim = pretty(xlims))
y %>% hist(breaks=30, main = "long right tail", xlim = pretty(xlims))
par(mfrow=c(1,2))
x <- rweibull(1000, 4, 2)
y <- rweibull(1000, 1.5, 1)
xlims <- range(x,y)
x %>% hist(breaks=30, main = "long left tail", at = pretty(xlims))
y %>% hist(breaks=30, main = "long right tail", at = pretty(xlims))
set.seed(10234)
par(mfrow=c(1,2))
x <- rweibull(1000, 4, 2)
y <- rweibull(1000, 1.5, 1)
xlims <- range(x,y)
x %>% hist(breaks=30, main = "long left tail", xlim = xlims)
y %>% hist(breaks=30, main = "long right tail", xlim = xlims)
xlims <- range(x,y)
xlims
xlims <- range(x-1,y+1)
x %>% hist(breaks=30, main = "long left tail", xlim = xlims)
y %>% hist(breaks=30, main = "long right tail", xlim = xlims)
set.seed(10234)
par(mfrow=c(1,2))
x <- rweibull(10000, 4, 2)
y <- rweibull(10000, 1.5, 1)
xlims <- range(x-1,y+1)
x %>% hist(breaks=30, main = "long left tail", xlim = xlims)
y %>% hist(breaks=30, main = "long right tail", xlim = xlims)
favstats(x)
x %>% hist(breaks=30, main = "long left tail", xlim = xlims)
y %>% hist(breaks=30, main = "long right tail", xlim = xlims)
favstats(x)
favstats(y)
abline(v = mean(y), col = "red")
abline(v = mean(y)+sd(y), col = "red")
df<- data.frame(x = c(28,31,34,35,37,41,42,42,42,47,47,51,52,52,60,61,67,72,75,80))
df$x
qt(0.975)
qt(0.975, 399)
qt(0.975, 399)^2
qnorm(0.995)
0.005+0.995
1-.01/2
pnorm(2.66)
pnorm(2.66, lower.tail = F)*2
pnorm(2.66, lower.tail = F)
pnorm(2.66, lower.tail = F)*2
qnorm(p = c(0.05, 0.95))
qnorm(p = c(0.025, 0.975))
qnorm(p = c(0.005, 0.995))
load("~/git_repositories/epib607/slides/one_sample_rate/DebTrivedi.rda")
DebTrivedi
DebTrivedi$ofp %>% hist
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob")
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob")
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
points(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red")
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
points(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red")
dev.off()
legend("topright", c("Poi(2)", "Poi(10)"), col = c("black","red"), pch=19)
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
points(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red")
legend("topright", c("Poi(2)", "Poi(10)"), col = c("black","red"), pch=19)
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
plot(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", add = TRUE)
dev.off()
plot.new()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
plot(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", add = TRUE)
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
lines(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", type = "h")
legend("topright", c("Poi(2)", "Poi(10)"), col = c("black","red"))
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h")
lines(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", type = "h")
legend("topright", c("Poi(2)", "Poi(10)"), col = c("black","red"), lty = c(1,1))
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="x", ylab="prob", type = "h", lwd = 2)
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="k", ylab="P(Y=k)", type = "h", lwd = 2)
lines(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", type = "h", lwd = 2)
legend("topright", c("Poi(2)", "Poi(10)"), col = c("black","red"), lty = c(1,1), lwd = 2)
legend("topright", c("Poisson(2)", "Poisson(10)"), col = c("black","red"), lty = c(1,1), lwd = 2)
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="k", ylab="P(Y=k)", type = "h", lwd = 2)
lines(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", type = "h", lwd = 2)
legend("topright", c(latex2exp::TeX("Poisson($\\lambda = 2$)"), "Poisson(10)"), col = c("black","red"), lty = c(1,1), lwd = 2)
dev.off()
plot(0:15, dpois(x = 0:15, lambda = 2),pch = 19, xlab="k", ylab="P(Y=k)", type = "h", lwd = 2)
lines(0:15, dpois(0:15, lambda = 10), pch = 19, col = "red", type = "h", lwd = 2)
legend("topright", c(latex2exp::TeX("Poisson($\\lambda = 2$)"),
latex2exp::TeX("Poisson($\\lambda = 10$)")),
col = c("black","red"), lty = c(1,1), lwd = 2)
par(mfrow=c(1,1),mar = rep(0.01,4) )
plot(c(0,1),c(0,1),ylim=c(-8,nrc+5),
xlim = c(0,nrc+59),col="white")
v=seq(1/2,nrc+1/2,1)
segments(0.5, v, nrc+1/2, v,
col="lightblue",lwd=0.6)
segments(v, 0.5, v, nrc+1/2,
col="lightblue",lwd=0.6)
# Peds
y  =   24
PT = 2159
nrc = 50
n   = nrc^2
B=5000
BB=3000
par(mfrow=c(1,1),mar = rep(0.01,4) )
plot(c(0,1),c(0,1),ylim=c(-8,nrc+5),
xlim = c(0,nrc+59),col="white")
v=seq(1/2,nrc+1/2,1)
segments(0.5, v, nrc+1/2, v,
col="lightblue",lwd=0.6)
segments(v, 0.5, v, nrc+1/2,
col="lightblue",lwd=0.6)
dev.off
dev.off()
# Peds
y  =   24
PT = 2159
nrc = 50
n   = nrc^2
B=5000
BB=3000
par(mfrow=c(1,1),mar = rep(0.01,4) )
plot(c(0,1),c(0,1),ylim=c(-8,nrc+5),
xlim = c(0,nrc+59),col="white")
v=seq(1/2,nrc+1/2,1)
segments(0.5, v, nrc+1/2, v,
col="lightblue",lwd=0.6)
segments(v, 0.5, v, nrc+1/2,
col="lightblue",lwd=0.6)
set.seed(2018)
row=sample(1:nrc,y)
col=sample(1:nrc,y)
points(col,row,pch=19,cex=0.25)
m=matrix(0,nrc,nrc)
for(i in 1:y) m[row[i],col[i]] = 1
sum(m)
text(nrc/2,nrc+2.5,
paste(toString(y),
"Needlestick Injuries in",
toString(PT),"Intern-Months (IM)"),
cex=0.85)
text(nrc/2,-5,
paste("Total of rectangular areas represents", toString(PT),"IM"),
cex=0.7)
# Poisson counts and exponential waiting times
# in case of tire ruptures
W=30000; # width of time window (in Km rather than time)
mu=5000  # mu of time r.v
dt=1000
DT=2500
y = 0:12 ;
y = 0:24
# start with generation 0 ('g.0') tire (g.0)
pr.end.in.g.0 = exp(-W/mu) # prob of not having exited g.0 by time W
pr.end.in.g.0
dpois(0:12,W/mu) # compare with above
1-pr.end.in.g.0 # prob of having exited g.0 by time W
density.g.1.entries = function(t) (1/mu) * exp(-t/mu)
pr.end.in.g.1.if.enter.g.1 = function(t) exp( -(W - t)/mu )
product = function(t) density.g.1.entries(t) * pr.end.in.g.1.if.enter.g.1(t)
pr.end.in.g.1.if.ENTER.g.1 = integrate(product, 0, W)$value/
integrate(density.g.1.entries, 0, W)$value
pr.end.in.g.1.if.ENTER.g.1  # over all entry times from 0 to W
(1 - pr.end.in.g.0 )*pr.end.in.g.1.if.ENTER.g.1 # prob(enter g.1) x prob(stay in g.1 of enter it)
dpois(0:12,W/mu) # compare PoissonProb(1 | mu=6) with above
## Can continue on iteratively, to gen.2 gen.3 etc.....
#  graphically (different coloour for each gen.)
t = seq(0,W,dt)
m=matrix(NA,nrow=length(y),ncol=length(t))
m[1,]  = rep(0,length(t))
for(Y in y[-1]) m[Y+1,]  = ppois(Y-1, t/mu)
par(mfrow=c(1,1),mar = c(5,5,0.1,0.1))
plot( c(0,1.1*max(t)), c(0,1.15), col="white",xlab="Km",ylab="Proportion in g 0, 1, 2, ... ")
for(Y in y[-1]){
polygon(c(t,-sort(-t)), c(m[Y,], m[Y+1,length(t):1] ) , col=Y,border=NA)
text(max(t), (m[Y,length(t)]+m[Y+1,length(t)])/2,toString(Y-1), col=Y, adj=c(-0.5,0.5), cex=0.6)
}
text(W/2, 1.1,"Expected Number of Events", adj=c(0.5,0), cex=0.75)
for(T in seq(DT,W,DT)){
text(T, 1.0,toString(T/mu), adj=c(0,0), cex=0.75,srt=45)
segments(T, 0,T,1, cex=0.5,col="white",lwd=0.5)
}
text(1.04*max(t), 0.5, "generation", srt=90)
# event = transition from 1 state or generation to another
# (failure / tire rupture/ birth / death / marriage / whatever ... )
load("~/git_repositories/epib607/slides/one_sample_rate/DebTrivedi.rda")
plot(table(DebTrivedi$ofp))
plot(table(DebTrivedi$ofp), ylab = "number of physician office visits")
table(DebTrivedi$ofp)
plot(table(DebTrivedi$ofp), xlab = "number of physician office visits", ylab = "frequency")
dpois(0:15, 0)
ls
ls()
dpois(0:15, 0)
dpois(0:15, 0.1)
plot(table(rpois(1000, 0.1))
)
plot(table(rpois(1000, 0.2))
)
plot(table(rpois(1000, 0.02)))
plot(table(rpois(1000, 0.59)))
plot(table(rpois(1000, 0.5)))
curve(dnorm(x, mean = 100, sd = 10), add = T)
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10), add = T)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10), add = T)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
curve(dnorm(x, mean = 100, sd = 10))
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10)*100, add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10)*1000, add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10)*10000, add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100))
curve(dnorm(x, mean = 100, sd = 10)*1000, add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20))
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
dev.off()
par(mfrow=c(2,2))
hist(rpois(1000, 0.5))
hist(rpois(1000, 5))
hist(rpois(1000, 20), freq = F)
curve(dnorm(x, mean = 20, sd = sqrt(20)), add = TRUE)
hist(rpois(1000, 100),freq = F)
curve(dnorm(x, mean = 100, sd = 10), add = TRUE)
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA),
LAMBDA = manipulate::slider(0, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{mosaic::xppois(6, lambda = LAMBDA);geom_abline(v=13)},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{mosaic::xppois(6, lambda = LAMBDA);geom_vline(v=13)},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{mosaic::xppois(6, lambda = LAMBDA);geom_vline(xintercept = 13)},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
mosaic::xppois(6, lambda = 13.6);
geom_vline(xintercept = 13)
mosaic::xppois(6, lambda = 13.6);
geom_vline(aes(xintercept = 13))
mosaic::xppois(6, lambda = 13.6)+ geom_vline(aes(xintercept = 13))
mosaic::xppois(6, lambda = 13.6)+ geom_vline(xintercept = 13)
mosaic::xppois(6, lambda = 13.6) + geom_vline(xintercept = 13.2)
p <- mosaic::xppois(6, lambda = 13.6)
p
mosaic::xppois(6, lambda = 13.6, return = "plot") +  geom_vline(xintercept = 13.2)
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA, return = "plot") +
geom_vline(xintercept = LAMBDA),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# lower limit --> upper tail needs 2.5%
# when lower.tail=FALSE, pbinom doesnt include k, i.e., P(Y > k)
manipulate::manipulate(
mosaic::xppois(7, lambda = LAMBDA, lower.tail = FALSE),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# lower limit --> upper tail needs 2.5%
# when lower.tail=FALSE, pbinom doesnt include k, i.e., P(Y > k)
manipulate::manipulate(
mosaic::xppois(6, lambda = LAMBDA, lower.tail = FALSE),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# lower limit --> upper tail needs 2.5%
# when lower.tail=FALSE, ppois doesnt include k, i.e., P(Y > k)
manipulate::manipulate(
mosaic::xppois(5, lambda = LAMBDA, lower.tail = FALSE),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{
mosaic::xppois(6, lambda = LAMBDA)
mosaic::xppois(6, lambda = LAMBDA, return = "plot") + theme_bw()
},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{
mosaic::xppois(6, lambda = LAMBDA, return = "plot") + theme_bw()
mosaic::xppois(6, lambda = LAMBDA, plot = FALSE)
},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
mosaic::xppois(6, lambda = LAMBDA, return = "plot") + theme_bw()
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{
mosaic::xppois(6, lambda = LAMBDA, return = "plot") + theme_bw()
},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# upper limit --> lower tail needs 2.5%
manipulate::manipulate(
{
mosaic::xppois(6, lambda = LAMBDA)
},
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
# lower limit --> upper tail needs 2.5%
# when lower.tail=FALSE, ppois doesnt include k, i.e., P(Y > k)
manipulate::manipulate(
mosaic::xppois(5, lambda = LAMBDA, lower.tail = FALSE),
LAMBDA = manipulate::slider(0.01, 20, step = 0.01))
qgamma(c(0.025,0.975), c(6, 7) )
mosaic::xqgamma(c(0.025,0.975), c(6, 7) )
mosaic::xqgamma(c(0.025,0.975), shape = c(6, 7) )
mosaic::xqgamma(c(0.025,0.975), shape = c(6) )
mosaic::xqgamma(c(0.025), shape = c(6) )
mosaic::xqgamma(c(0.975), shape = c(5), lower.tail=F )
mosaic::xqgamma(c(0.975), shape = c(7), lower.tail=F )
mosaic::xqgamma(c(0.975), shape = c(7))
mosaic::xqgamma(c(0.975), shape = c(6))
mosaic::xqgamma(c(0.975), shape = c(7))
