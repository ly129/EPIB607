plot(table(water_results[,4]),xlim=c(0,1),
main="n=20",ylim=c(0,N.r/2),ylab="Frequency")
hist(m[,6],xlim=c(0,6000),
ylim=c(0, N.r/1.5),breaks=d.BREAKS,
main="n=20",xlab="")
hist(water_results[,6],xlim=c(0,6000),
ylim=c(0, N.r/1.5),breaks=d.BREAKS,
main="n=20",xlab="")
library(mosaic)
library(tidyr)
# first 'melt' the data to get it in plotting form
m.melt <- water_results %>% tidyr::gather(key = "type", value = "value", -ID, -student)
water_results
# first 'melt' the data to get it in plotting form
m.melt <- water_results %>% tidyr::gather(key = "type", value = "value", -X., -student)
# subset for means
m.melt.means <- subset(m.melt, type %in% c("Mean.20.depths","Mean.5.depths"))
# plot for means
gf_density(~ value, data = m.melt.means, fill = ~ type) + theme_bw()
cens <- read.csv("https://github.com/sahirbhatnagar/EPIB607/raw/master/data/age_sex_frequencies_ireland.csv")
head(cens)
cens <- read.csv("https://github.com/sahirbhatnagar/EPIB607/raw/master/data/age_sex_frequencies_ireland.csv")
head(cens)
cens$new_age <- cens$Age + 0.5
head(cens)
cens <- read.csv("https://github.com/sahirbhatnagar/EPIB607/raw/master/data/age_sex_frequencies_ireland.csv")
head(cens)
gf_histogram(Frequency ~ Age, data = cens) %>%
gf_facet_wrap(~ Gender)
library(mosaic)
gf_histogram(Frequency ~ Age, data = cens) %>%
gf_facet_wrap(~ Gender)
cens
gf_histogram(Freq ~ Age, data = cens) %>%
gf_facet_wrap(~ Gender)
gf_histogram(Freq ~ Age, data = cens, stat = "identity") %>%
gf_facet_wrap(~ Gender)
gf_histogram(Freq ~ Age, data = cens, stat = "identity") %>%
gf_facet_wrap(~ Gender)
gf_histogram(Freq ~ Age, data = cens, stat = "identity")
gf_histogram(Freq ~ Age, data = cens) %>%
gf_facet_wrap(~ Gender)
water_results <- read.csv("~/Downloads/EPIB607_FALL2018_water_exercise - sample.sheet.csv", as.is=TRUE)
# read in the results from the Google sheet
water_results <- read.csv("EPIB607_FALL2018_water_exercise - water.csv", as.is=TRUE)
water_results <- read.csv("~/Downloads/EPIB607_FALL2018_water_exercise - water.csv", as.is=TRUE)
water_results <- water_results[,1:6]
water_results <- water_results[complete.cases(water_results), ]
# count the number of students who provided a mean and proportion
N.r <- nrow(water_results)
water_results <- read.csv("~/Downloads/EPIB607_FALL2018_water_exercise - sample.sheet.csv", as.is=TRUE)
water_results <- water_results[,1:6]
water_results <- water_results[complete.cases(water_results), ]
# count the number of students who provided a mean and proportion
N.r <- nrow(water_results)
library(gridExtra)
p1 <- plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
p2 <- plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
gridExtra::grid.arrange(p1,p2)
par(mfrow=c(2,1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
par()$mai
par()$omi
par(mfrow=c(2,1), mai = c(0.6,0.5,0.5,0.3))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
par(mfrow=c(2,1), mai = c(0.4,0.5,0.5,0.3))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
par(mfrow=c(2,1), mai = c(0.45,0.45,0.45,0.1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
abline(v=0.71, col = "blue")
abline(v=0.71, col = "blue", lty = 2)
par(mfrow=c(2,1), mai = c(0.45,0.45,0.45,0.1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
text(0.72, 40, expression(mu))
text(0.72, 40, expression(mu=20))
text(0.72, 40, "=20")
text(0.76, 40, "=20")
par(mfrow=c(2,1), mai = c(0.45,0.45,0.45,0.1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
text(0.72, 40, expression(mu))
text(0.76, 40, "=20")
text(0.76, 41, "=20")
text(0.75, 41, "=20")
text(0.75, 41, "=0.71")
par(mfrow=c(2,1), mai = c(0.45,0.45,0.45,0.1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
text(0.72, 40, expression(mu))
text(0.75, 41, "=0.71")
par(mfrow=c(2,1), mai = c(0.45,0.45,0.45,0.1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
text(0.72, 40, expression(mu))
text(0.76, 41, "=0.71")
par(mfrow=c(2,1), mai = c(0.45,0.45,0.45,0.1))
plot(table(water_results[,"PropnW.5.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 5",
ylim = c(0, N.r/1.5),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
text(0.72, 40, expression(mu))
text(0.76, 41, "=0.71")
plot(table(water_results[,"PropnW.20.locations"]),
xlim = c(0,1),
xlab = "Students' Estimates of Proportion Covered by Water",
main = "n = 20",
ylim = c(0, N.r/2),
ylab = "Frequency")
abline(v=0.71, col = "#009E73", lty = 2)
text(0.72, 40, expression(mu))
text(0.76, 41, "=0.71")
library(mosaic)
library(tidyr)
# first 'melt' the data to get it in plotting form
m.melt <- water_results %>% tidyr::gather(key = "type", value = "value", -X., -student)
# subset for means
m.melt.means <- subset(m.melt, type %in% c("Mean.20.depths","Mean.5.depths"))
water_results
water_results <- read.csv("~/Downloads/EPIB607_FALL2018_water_exercise - water.csv", as.is=TRUE)
water_results <- read.csv("~/git_repositories/epib607/slides/sampling_dist/EPIB607_FALL2018_water_exercise - water.csv", as.is=TRUE)
# read in the results from the Google sheet
water_results <- read.csv("EPIB607_FALL2018_water_exercise - water.csv", as.is=TRUE)
water_results <- read.csv("~/git_repositories/epib607/slides/sampling_dist/EPIB607_FALL2018_water_exercise - water.csv", as.is=TRUE)
water_results <- water_results[,1:6]
water_results <- water_results[complete.cases(water_results), ]
# count the number of students who provided a mean and proportion
N.r <- nrow(water_results)
head(water_results)
# first 'melt' the data to get it in plotting form
m.melt <- water_results %>% tidyr::gather(key = "type", value = "value", -X., -student)
# subset for means
m.melt.means <- subset(m.melt, type %in% c("Mean.20.depths","Mean.5.depths"))
# plot for means
gf_density(~ value, data = m.melt.means, fill = ~ type) + theme_bw()
# subset for proportions
m.melt.props <- subset(m.melt, type %in% c("PropnW.20.locations","PropnW.5.locations"))
# plot for proportions
gf_histogram(~ value, data = m.melt.props, fill = ~ type, position = "dodge") + theme_bw()
allLocations=read.csv("~/git_repositories/epib607/data/earth-locations-20180914.csv")
allLocations$water  = 1*(allLocations$alt < 0)
summary(allLocations)
par(mfrow=c(2,2),mar = c(4,4,2,1) )
ew=allLocations$lon[allLocations$water==1]
ns=allLocations$lat[allLocations$water==1]
plot(ew*cos(pi*ns/180),
allLocations$lat[allLocations$water==1],
col="blue",cex=0.02)
plot( table( round(allLocations$lat) ) )
depthsOfWater = allLocations[allLocations$water==1,]
depthsOfWater$depth = -depthsOfWater$alt
str(depthsOfWater)
summary(depthsOfWater)
hist(depthsOfWater$depth,breaks=100)
heightsOfLand = allLocations[allLocations$water==0,]
str(heightsOfLand)
summary(heightsOfLand)
hist(heightsOfLand$alt,breaks=100)
allLocations$water  = 1*(allLocations$alt < 0)
summary(allLocations)
par(mfrow=c(2,2),mar = c(4,4,2,1) )
plot(allLocations$lon[allLocations$water==1],
allLocations$lat[allLocations$water==1],
col="blue",cex=0.02)
plot( table( round(allLocations $lat) ) )
dev.off()
plot(allLocations$lon[allLocations$water==1],
allLocations$lat[allLocations$water==1],
col="blue",cex=0.02)
plot(ew*cos(pi*ns/180),
allLocations$lat[allLocations$water==1],
col="blue",cex=0.02)
allLocations$water  = 1*(allLocations$alt < 0)
summary(allLocations)
ew=allLocations$lon[allLocations$water==1]
ns=allLocations$lat[allLocations$water==1]
plot(ew*cos(pi*ns/180),
allLocations$lat[allLocations$water==1],
col="blue",cex=0.02)
allLocations=read.csv("~/git_repositories/epib607/data/earth-locations-20180914.csv")
# allLocations=read.csv("~/git_repositories/epib607/data/earth-locations-20180914.csv")
str(allLocations)
allLocations$water  = 1*(allLocations$alt < 0)
summary(allLocations)
par(mfrow=c(2,2),mar = c(4,4,2,1) )
ew=allLocations$lon[allLocations$water==1]
ns=allLocations$lat[allLocations$water==1]
plot(ew*cos(pi*ns/180),
allLocations$lat[allLocations$water==1],
col="blue",cex=0.02)
plot( table( round(allLocations$lat) ) )
depthsOfWater = allLocations[allLocations$water==1,]
depthsOfWater$depth = -depthsOfWater$alt
str(depthsOfWater)
summary(depthsOfWater)
hist(depthsOfWater$depth,breaks=100)
heightsOfLand = allLocations[allLocations$water==0,]
str(heightsOfLand)
summary(heightsOfLand)
hist(heightsOfLand$alt,breaks=100)
par(mfrow=c(1,2),mar = c(4,4,1,0.1) )
for (panel in 1:2){
# depths
if(panel==1) y = round(depthsOfWater$depth/100)
if(panel==2) y = round(heightsOfLand$alt/100)
( f = table(y) )
str(f)
x=as.numeric(dimnames(f)[[1]])
Y=0:max(x) ;
FREQ=approx(x,f,Y)$y
#plot(Y,FREQ,type="l")
( n.bins=length(FREQ) )
max.Y = max(Y);
max.X = max.Y
if (panel==2) max.X =25
M = 1.05*max(f)
FREQ[1+Y] =  FREQ/sum(FREQ)
AVE = sum(Y*FREQ)
SD = sqrt(sum( FREQ*(Y-AVE)^2 ) )
already = FREQ
max.n = 16; show=c(1,2,3,4,5,5,6,7,8,9,16)
YLIM=sqrt(max.n/(panel^2.5))*max(FREQ)*c(-0.11,0.75)
XLAB=c("OCEAN DEPTH","LAND ELEVATION")
plot(Y,already,pch=19,lwd=1,col="white",
type="l",ylim=YLIM, xlim=c(0,max.X),
ylab="Density", xlab=XLAB[panel] )
polygon(c(0,Y),c(0,FREQ),
col=c("lightblue","bisque","grey98")[panel],
border="grey10",lwd=1)
for(n in 2:max.n){
f = outer(already,FREQ)
f[1:5,1:5]
ff = sapply(split(f, col(f) + row(f)), sum)
ff[1:5]
ave = (0:(n* max.Y))/n
if( n %in% show ){
lines(ave,ff*n,col=n,lwd=4.5-4*(n-1)/n)
text(1.5*AVE,max(ff*n),
paste("means of samples of size",toString(n)),
adj=c(0,0.5),col=n,cex=0.65)
}
already=as.numeric(ff)
}
segments(AVE,0, AVE, 1.1*max(FREQ),lty="dotted")
text(AVE,  0.35*YLIM[1],toString(round(AVE,0)), adj=c(0.5,1),
cex=0.85 )
txt= "Ocean Depths
(units = 100m)"
if(panel==2) txt="Land Elevations
(units = 100m)"
text(AVE+5,0.7*YLIM[1],txt,
col="lightblue",adj=c(0,0.5),font=2)
text(0.85*AVE,0.35*YLIM[1],expression(mu), adj=c(0.5,1.25),
cex=0.95 )
text(AVE,  0.99*YLIM[1], toString(round(SD,0)), adj=c(0.5,0),
cex=0.85 )
text(0.85*AVE,0.99*YLIM[1],expression(sigma), adj=c(0.5,0),
cex=0.95 )
for(a in AVE+(-20:20)) segments(a,0,a,0.1*YLIM[1])
for(a in AVE+c(-20,-15,-10,-5,0,5,10,15,20)) segments(a,0,a,0.2*YLIM[1])
}
dev.off()
# par(mfrow=c(1,2),mar = c(4,4,1,0.1) )
par(mar = c(4,4,1,0.1))
dev.off()
for (panel in 1){
# depths
if(panel==1) y = round(depthsOfWater$depth/100)
if(panel==2) y = round(heightsOfLand$alt/100)
( f = table(y) )
str(f)
x=as.numeric(dimnames(f)[[1]])
Y=0:max(x) ;
FREQ=approx(x,f,Y)$y
#plot(Y,FREQ,type="l")
( n.bins=length(FREQ) )
max.Y = max(Y);
max.X = max.Y
if (panel==2) max.X =25
M = 1.05*max(f)
FREQ[1+Y] =  FREQ/sum(FREQ)
AVE = sum(Y*FREQ)
SD = sqrt(sum( FREQ*(Y-AVE)^2 ) )
already = FREQ
max.n = 16; show=c(1,2,3,4,5,5,6,7,8,9,16)
YLIM=sqrt(max.n/(panel^2.5))*max(FREQ)*c(-0.11,0.75)
XLAB=c("OCEAN DEPTH","LAND ELEVATION")
plot(Y,already,pch=19,lwd=1,col="white",
type="l",ylim=YLIM, xlim=c(0,max.X),
ylab="Density", xlab=XLAB[panel] )
polygon(c(0,Y),c(0,FREQ),
col=c("lightblue","bisque","grey98")[panel],
border="grey10",lwd=1)
for(n in 2:max.n){
f = outer(already,FREQ)
f[1:5,1:5]
ff = sapply(split(f, col(f) + row(f)), sum)
ff[1:5]
ave = (0:(n* max.Y))/n
if( n %in% show ){
lines(ave,ff*n,col=n,lwd=4.5-4*(n-1)/n)
text(1.5*AVE,max(ff*n),
paste("means of samples of size",toString(n)),
adj=c(0,0.5),col=n,cex=0.65)
}
already=as.numeric(ff)
}
segments(AVE,0, AVE, 1.1*max(FREQ),lty="dotted")
text(AVE,  0.35*YLIM[1],toString(round(AVE,0)), adj=c(0.5,1),
cex=0.85 )
txt= "Ocean Depths
(units = 100m)"
if(panel==2) txt="Land Elevations
(units = 100m)"
text(AVE+5,0.7*YLIM[1],txt,
col="lightblue",adj=c(0,0.5),font=2)
text(0.85*AVE,0.35*YLIM[1],expression(mu), adj=c(0.5,1.25),
cex=0.95 )
text(AVE,  0.99*YLIM[1], toString(round(SD,0)), adj=c(0.5,0),
cex=0.85 )
text(0.85*AVE,0.99*YLIM[1],expression(sigma), adj=c(0.5,0),
cex=0.95 )
for(a in AVE+(-20:20)) segments(a,0,a,0.1*YLIM[1])
for(a in AVE+c(-20,-15,-10,-5,0,5,10,15,20)) segments(a,0,a,0.2*YLIM[1])
}
panel=1
if(panel==1) y = round(depthsOfWater$depth/100)
( f = table(y) )
str(f)
x=as.numeric(dimnames(f)[[1]])
Y=0:max(x) ;
FREQ=approx(x,f,Y)$y
dev.off()
panel=1
if(panel==1) y = round(depthsOfWater$depth/100)
if(panel==2) y = round(heightsOfLand$alt/100)
( f = table(y) )
str(f)
x=as.numeric(dimnames(f)[[1]])
Y=0:max(x) ;
FREQ=approx(x,f,Y)$y
( n.bins=length(FREQ) )
max.Y = max(Y);
max.X = max.Y
if (panel==2) max.X =25
M = 1.05*max(f)
FREQ[1+Y] =  FREQ/sum(FREQ)
AVE = sum(Y*FREQ)
SD = sqrt(sum( FREQ*(Y-AVE)^2 ) )
already = FREQ
max.n = 16; show=c(1,2,3,4,5,5,6,7,8,9,16)
YLIM=sqrt(max.n/(panel^2.5))*max(FREQ)*c(-0.11,0.75)
XLAB=c("OCEAN DEPTH","LAND ELEVATION")
plot(Y,already,pch=19,lwd=1,col="white",
type="l",ylim=YLIM, xlim=c(0,max.X),
ylab="Density", xlab=XLAB[panel] )
polygon(c(0,Y),c(0,FREQ),
col=c("lightblue","bisque","grey98")[panel],
border="grey10",lwd=1)
for(n in 2:max.n){
f = outer(already,FREQ)
f[1:5,1:5]
ff = sapply(split(f, col(f) + row(f)), sum)
ff[1:5]
ave = (0:(n* max.Y))/n
if( n %in% show ){
lines(ave,ff*n,col=n,lwd=4.5-4*(n-1)/n)
text(1.5*AVE,max(ff*n),
paste("means of samples of size",toString(n)),
adj=c(0,0.5),col=n,cex=0.65)
}
already=as.numeric(ff)
}
max.n
pacman::p_load(mosaic)
pacman::p_load(manipulate)
mNorm <- function( mean=0, sd=1 ) {
lo <- mean - 5*sd
hi <- mean + 5*sd
manipulate(
xpnorm( c(A,B), mean, sd, verbose=FALSE, invisible=TRUE ),
A = slider(lo, hi, initial=mean-sd),
B = slider(lo, hi, initial=mean+sd)
)
}
mNorm( mean=100, sd=10 )
mNorm( mean=0, sd=1 )
xpnorm(1)
xpnorm(-3:3)
xpnorm(c(-1,1))
xpnorm(c(-2,2))
mNorm <- function( mean=0, sd=1 ) {
lo <- mean - 5*sd
hi <- mean + 5*sd
manipulate(
xpnorm( c(A,B), mean, sd, verbose=FALSE, invisible=TRUE ),
A = slider(lo, hi, initial=mean-sd),
B = slider(lo, hi, initial=mean+sd)
)
}
mNorm( mean=0, sd=1 )
xpnorm(-1)
pnorm(-1)
p1 <- xpnorm(130, 100,13)
p1
mosaic::xpnorm(q = c(-2.31,2.31), mean = 100, sd = 13)
xqnorm(0.75, 100, 13)
