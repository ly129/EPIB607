## ---- load-functions ----

"%ni%" <- Negate("%in%")

jitter.binary <- function(a, jitt=.05){
  ifelse (a-1==0, runif(length(a), 0, jitt), runif(length(a), 1-jitt, 1))
}

predict_pooled <- function(betas, covariance, preopventilat = "Not Ventilated",
                           preopsepsis = "No Shock", fsteroid = "Non-immunosuppressed",
                           prwbcf = "(4,20]", prplatef = "(150,996]", prcreat = 2, numage = 50) {

  res <- matrix(nrow = 1, ncol = 4)
  dimnames(res)[[2]] <- list("age","prob","lower","upper")

  newdat <- data.frame(preopventilat = preopventilat,
                       preopsepsis = preopsepsis,
                       fsteroid = fsteroid,
                       prwbcf = prwbcf,
                       prplatef = prplatef,
                       prcreat = prcreat,
                       numage = numage,
                       stringsAsFactors = FALSE)

  newdat <- newdat %>%
    mutate(preopventilat = factor(preopventilat, levels = c("Not Ventilated", "Ventilated")),
           preopsepsis = factor(preopsepsis, levels = c("No Shock","Shock")),
           fsteroid = factor(fsteroid, levels = c("Non-immunosuppressed","Immunosuppressed")),
           prwbcf = factor(prwbcf, levels = c("[0.1,4]","(4,20]","(20,50]","(50,124.3]")),
           prplatef = factor(prplatef, levels = c("[17,150]","(150,996]")))

  mod_mat <- model.matrix(~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
                            poly(prcreat, 2, raw = TRUE) + poly(numage, 2, raw = TRUE),
                          data = newdat)

  yhats <- mod_mat %*% betas
  predicted_probs <- plogis(yhats) %>% as.vector()

  # standard error on the logit scale is
  pred_err <- sqrt(mod_mat %*% covariance %*% t(mod_mat))

  # CI on the probability scale is:
  ci <- plogis(c(yhats + qnorm(0.025) * pred_err, yhats + qnorm(0.975) * pred_err))

  return(data.frame(preopventilat = preopventilat,
                    preopsepsis = preopsepsis,
                    fsteroid = fsteroid,
                    prwbcf = prwbcf,
                    prplatef = prplatef,
                    prcreat = prcreat,
                    numage = numage,
                    prob = predicted_probs,
                    se = as.numeric(pred_err),
                    lower = ci[1],
                    upper = ci[2], stringsAsFactors = FALSE))


}
