################################
# Script for mortality study analysis. 
#
# Creator: Sahir Bhatnagar
# Created: March 8, 2016
# Updated: 
# Notes: Need to source 'data.R' first
################################


## ---- load-data ----
rm(list=ls())
source("~/Dropbox/consulting/coco/trendsmortality/bin/data-multinomial.R")
# source("C:/Users/sahir/Dropbox/consulting/coco/trendsmortality/bin/data-multinomial.R")

tmp <- subset(DT_final, lex.Xst != "Alive", c(unique_id))
DT_final[multinomOutcome != "Alive"][,table(unique_id)]
bad.pts <- subset(with(tmp, aggregate(x=list(num=unique_id), by=list(unique_id=unique_id), FUN=length)), num > 1)[["unique_id"]]
bad.pts %>% length()
subset(DT_final, unique_id %in% bad.pts & multinomOutcome != "Alive", c(unique_id, period.f, visit, multinomOutcome))

DT_final[unique_id=="A21"]
DT_final[unique_id=="M19"]
#DT_final[,table(multinomOutcome)]
# DT_final[, table(HIVRNA_dich, useNA = "always")]
# DT_final[, table(HIVRNA_dich.1, useNA = "always")]
DT_final[, table(HCVRNA_adj, useNA = "always")]
DT_final[, table(HCVRNA_first_visit, useNA = "always")]
DT_final[, table(HCVRNA_last_visit, useNA = "always")]

# fit_vglm1 <- VGAM::vglm(multinomOutcome ~ age.f + period.f + 
#                            HIVRNA_dich + APRI_dich + CD4 + HCVRNA_adj, 
#                   family = VGAM::multinomial(refLevel = 1, whitespace = TRUE),
#                   data = DT_final)
DT_final$lex.Xst %>% table
# fit_vglm <- VGAM::vglm(multinomOutcome ~ age.f + period.f + 
#                            HIVRNA_dich + APRI_dich + CD4 + HCVRNA_last_visit, 
#                        family = VGAM::multinomial(refLevel = 1, whitespace = TRUE), maxit = 100,
#                        data = DT_final)
fit_vglm <- VGAM::vglm(lex.Xst ~ age.f + period.f + 
                           HIVRNA_dich + APRI_dich + CD4 + HCVRNA_last_visit, 
                       family = VGAM::multinomial(refLevel = 1, whitespace = TRUE), maxit = 100,
                       data = DT_final)
# fit_vglm <- VGAM::vglm(multinomOutcome ~ age.f + period.f, 
#                        family = VGAM::multinomial(refLevel = 1, whitespace = TRUE), maxit = 100,
#                        data = DT_final)

ds <- DT_final[, c("multinomOutcome","age.f","period.f","HIVRNA_dich","APRI_dich","CD4","HCVRNA_last_visit")]
ds <- DT_final[, c("multinomOutcome","age.f","period.f")]
ds[complete.cases(ds), table(multinomOutcome)]

fit_vglm@y %>% nrow
DT_final %>% nrow
# summary(fit_vglm)
# summary(fit_vglm2)
# AIC(fit_vglm1)
# AIC(fit_vglm2)
# 
# DT_final[, table(multinomOutcome)]
# summary(fit_vglm)
# 
# fit_vglm_no <- VGAM::vglm(multinomOutcome ~ age.f + period.f,
#                        family = VGAM::multinomial(refLevel = 1, whitespace = TRUE),
#                        data = DT_final)


# anova(fit_vglm,fit_vglm_no) #no anova method implemented for vglm() models (yet)
# summary(fit_vglm)
# summary(fit_vglm_no)
# fit_nnet <- nnet::multinom(multinomOutcome ~ age.f + period.f,data = DT_final)
# 
# # getting identical results, but vglm gives p-values
# # in the output for vglm, 1 is ESLD, 2 is Smoking, 3 is Other, 4 is Unknown
# 
# fit_vglm_smoke <- VGAM::vglm(multinomOutcome ~ age.f + period.f + smoke, 
#                        family = VGAM::multinomial(refLevel = 1, whitespace = TRUE),
#                        data = DT_smoke)


## ---- table-1 ----

DT_table1 <- copy(DT_lexis)

# for the 203 deaths, each of their visit entries should always have death==1 
# even if they didnt die in that visit.
# whereas, for the multinomOutcome, they will have Alive for the visit in which 
# they didnt die, and then would have the Outcome for the visit they died in 
# DT_table1[death==1]$unique_id %>% unilen
# DT_table1[death==0]$unique_id %>% unilen
# unique(DT_table1)[,table(death)]
# 
# DT_table1[, table(multinomOutcome)] %>% 
#     as.data.table() %>% 
#     filter(multinomOutcome %ni% "Alive") %>% 
#     use_series("N") %>% 
#     sum
# 
# DT_table1[,table(unique_id,visit)] %>% 
#     as.data.table() %>% 
#     filter(visit == 1 & N != 1)
# 
# DT_table1[,table(unique_id,visit)] %>% 
#     as.data.table() %>% 
#     filter(visit == 1)
# 
# DT_table1[unique_id=="M69"]
# DT_table1[unique_id=="A14"]
# DT[unique_id=="M69"]

key(DT_table1)
uDT1 <- unique(DT_table1, by="unique_id")

# Determine the first and last visit for each subject
uDT <- unique(DT_table1, by="unique_id")
DT_table1[, c("first_visit","last_visit"):=0L]
DT_table1[uDT, first_visit:=1L, mult="first"]
DT_table1[uDT, last_visit:=1L, mult="last"]

DT_table1[first_visit==1, table(visit)]
# DT_table1[first_visit==1 & visit==7]
# DT_table1[unique_id=="E90"]


DT_table1[last_visit==1][, table(multinomOutcome, table3Outcome)]
DT_table1[last_visit==1][, table(multinomOutcome)]

# get total follow up time
DT_table1[, total_follow_up_time:=sum(visitLength)/12, by=unique_id]
DT_table1[unique_id=="A1"]

# used in Manuscript
DT_table1[last_visit==1][, sum(total_follow_up_time)]
DT_table1[last_visit==1]$unique_id %>% unilen()
DT_table1[last_visit==1 & multinomOutcome!="Alive"][, table(multinomOutcome)] %>% t %>% t
(DT_table1[last_visit==1 & multinomOutcome!="Alive"][, table(multinomOutcome)] %>% sum)
(DT_table1[last_visit==1 & multinomOutcome!="Alive"][, table(multinomOutcome)] %>% sum) / nrow(DT_table1[last_visit==1])


DT_table1[, table(table3Outcome, useNA = "always")]
smoking_pneumonia_id <- DT_table1[table3Outcome %in% "Smoking_Pneumonia"]$unique_id

# this shows that 1 of the deaths classified as smoking_pneumonia were not smokers
# fixed in data-multinomial.R
DT_table1[unique_id %in% smoking_pneumonia_id][smoke==0 & smoke_curr==0]
DT_table1[unique_id %in% smoking_pneumonia_id][smoke==1 | smoke_curr==1]$unique_id %>% unilen()
DT_table1[unique_id %in% "N188"]



# Total subjects ----------------------------------------------------------


table1_fun <- function(object, title) {
    # browser()
    # object <- DT_table1
    # ====================================
    
    # Follow-up time (FUT), median (IQR) (years) ------------------------------
    (FUT_median_IQR <- sprintf("%.2g (%.2g, %.2g)", object[last_visit==1][, median(total_follow_up_time)],
                               object[last_visit==1][, fivenum(total_follow_up_time)[c(2)]],
                               object[last_visit==1][, fivenum(total_follow_up_time)[c(4)]]))
    
    
    # Age (Entry and Exit) ----------------------------------------------------
    
    object[first_visit==1][, sum(Age, na.rm = T)]
    object[is.na(Age)] # 1 person with missing Age
    (Age_median_IQR_entry <- sprintf("%.2g (%.2g, %.2g)", object[first_visit==1][, median(Age, na.rm = TRUE)],
                                     object[first_visit==1][, fivenum(Age)[c(2)]],
                                     object[first_visit==1][, fivenum(Age)[c(4)]]))
    
    (Age_median_IQR_exit <- sprintf("%.2g (%.2g, %.2g)", object[last_visit==1][, median(Age, na.rm = TRUE)],
                                    object[last_visit==1][, fivenum(Age)[c(2)]],
                                    object[last_visit==1][, fivenum(Age)[c(4)]]))
    
    # Female ----------------------------------------------------
    object[first_visit==1][, table(female, useNA = "always")]
    object[is.na(female)]$unique_id %>% unilen # 9 people with missing gender
    (Female_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][, sum(female, na.rm = TRUE)],
                                         object[first_visit==1][, 100*sum(female, na.rm = TRUE)/(.N)]))
    
    # Aboriginal ----------------------------------------------------
    # there are 6 NA entries for aboriginal 
    # object[first_visit==1][,table(aboriginal, useNA = "always")]
    (Aboriginal_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(aboriginal)][, sum(aboriginal)],
                                             object[first_visit==1][!is.na(aboriginal)][, 100*sum(aboriginal)/(.N)]))
    
    # High School ----------------------------------------------------
    names(object)
    object[first_visit==1][, table(education_dich, useNA = "always")]
    (HighSchool_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][, sum(education_dich, na.rm = T)],
                                             object[first_visit==1][, 100*sum(education_dich, na.rm = T)/(.N)]))
    
    # Income ----------------------------------------------------
    object[first_visit==1][, table(income_dich, useNA = "always")]
    (Income_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(income_dich)][, sum(income_dich)],
                                         object[first_visit==1][!is.na(income_dich)][, 100*sum(income_dich, na.rm = T)/(.N)]))
    
    # IDU History ----------------------------------------------------
    object[first_visit==1][, table(IDU, useNA = "always")]
    (IDUhist_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][IDU!=99][!is.na(IDU)][, sum(IDU)],
                                          object[first_visit==1][IDU!=99][!is.na(IDU)][, 100*sum(IDU)/(.N)]))
    
    # IDU current (Entry and Exit) ----------------------------------------------------
    object[first_visit==1][, table(idu_6m, useNA = "always")]
    object[last_visit==1][, table(idu_6m, useNA = "always")]
    (IDUActive_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][idu_6m!=99][!is.na(idu_6m)][, sum(idu_6m)],
                                                  object[first_visit==1][idu_6m!=99][!is.na(idu_6m)][, 100*sum(idu_6m)/(.N)]))
    
    (IDUActive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][idu_6m!=99][!is.na(idu_6m)][, sum(idu_6m)],
                                                 object[last_visit==1][idu_6m!=99][!is.na(idu_6m)][, 100*sum(idu_6m)/(.N)]))
    
    # Alcohol History ----------------------------------------------------
    
    #patient previously drank: 1= yes, 0= no, 2= not applicable (if etoh= 1)
    object[first_visit==1][, table(ETOH_ever, useNA = "always")]
    (Alcoholhist_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][ETOH_ever!=99][!is.na(ETOH_ever)][, sum(ETOH_ever==1)],
                                          object[first_visit==1][ETOH_ever!=99][!is.na(ETOH_ever)][, 100*sum(ETOH_ever==1)/(.N)]))
    
    # Alcohol (Entry and Exit) ----------------------------------------------------
    object[first_visit==1][, table(etoh, useNA = "always")]
    (AlcoholActive_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][etoh!=99][!is.na(etoh)][, sum(etoh)],
                                                      object[first_visit==1][etoh!=99][!is.na(etoh)][, 100*sum(etoh)/(.N)]))
    
    object[last_visit==1][, table(etoh, useNA = "always")]
    (AlcoholActive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][etoh!=99 & etoh!=2 ][!is.na(etoh)][, sum(etoh)],
                                                     object[last_visit==1][etoh!=99 & etoh!=2][!is.na(etoh)][, 100*sum(etoh)/(.N)]))
    
    # Smoker (Ever smoker) and current smoker ----------------------------------------------------
    object[first_visit==1][, table(smoke, useNA = "always")]
    object[last_visit==1][, table(smoke, useNA = "always")]
    
    # smoke: ever smoke cigarettes: 1 = yes, 0 = no
    (Smoking_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][smoke!=99][!is.na(smoke)][, sum(smoke)],
                                          object[first_visit==1][smoke!=99][!is.na(smoke)][, 100*sum(smoke)/(.N)]))
    
    (Smoking_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, sum(smoke_curr)],
                                               object[first_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, 100*sum(smoke_curr)/(.N)]))

    object[last_visit==1][, table(smoke_curr, useNA = "always")]
    (Smoking_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, sum(smoke_curr)],
                                          object[last_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, 100*sum(smoke_curr)/(.N)]))
    
    
    # Time since HIV Diagnosis ------------------------------------------------
    
    object[first_visit==1][is.na(HIV_duration)]
    (HIV_time_median_IQR <- sprintf("%.2g (%.2g, %.2g)", object[first_visit==1][!is.na(HIV_duration)][, median(HIV_duration)],
                                    object[first_visit==1][!is.na(HIV_duration)][, fivenum(HIV_duration)[c(2)]],
                                    object[first_visit==1][!is.na(HIV_duration)][, fivenum(HIV_duration)[c(4)]]))
    
    
    
    # Aids Diagnosis (Entry and Exit) -----------------------------------------
    
    object[first_visit==1][, table(AIDS_illness_YN, useNA = "always")]
    (Aids_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][AIDS_illness_YN!=99][!is.na(AIDS_illness_YN)][, sum(AIDS_illness_YN)],
                                             object[first_visit==1][AIDS_illness_YN!=99][!is.na(AIDS_illness_YN)][, 100*sum(AIDS_illness_YN)/(.N)]))
    
    object[last_visit==1][, table(AIDS_illness_YN, useNA = "always")]
    (Aids_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][AIDS_illness_YN!=99 & AIDS_illness_YN!=2 ][!is.na(AIDS_illness_YN)][, sum(AIDS_illness_YN)],
                                            object[last_visit==1][AIDS_illness_YN!=99 & AIDS_illness_YN!=2][!is.na(AIDS_illness_YN)][, 100*sum(AIDS_illness_YN)/(.N)]))
    
    
    # Nadir CD4 Cell count Past ------------------------------------------
    
    object[first_visit==1][is.na(lowest_cd4)]
    object[first_visit==1][lowest_cd4<0]
    
    
    (Nadir_CD4_median_IQR <- sprintf("%.3g (%.2g, %.3g)", object[first_visit==1][!is.na(lowest_cd4) & lowest_cd4 >= 0 ][, median(lowest_cd4)],
                                     object[first_visit==1][!is.na(lowest_cd4) & lowest_cd4 >= 0 ][, fivenum(lowest_cd4)[c(2)]],
                                     object[first_visit==1][!is.na(lowest_cd4) & lowest_cd4 >= 0 ][, fivenum(lowest_cd4)[c(4)]]))
    
    # CD4 cell count (Entry and Exit) ----------------------------------------------------
    
    object[first_visit==1][is.na(cd4)]
    object[first_visit==1][,.(cd4)]
    
    (CD4_median_IQR_entry <- sprintf("%.3g (%.3g, %.3g)", object[first_visit==1][!is.na(cd4) & cd4 >= 0 ][, median(cd4)],
                                     object[first_visit==1][!is.na(cd4) & cd4 >= 0 ][, fivenum(cd4)[c(2)]],
                                     object[first_visit==1][!is.na(cd4) & cd4 >= 0 ][, fivenum(cd4)[c(4)]]))
    
    object[last_visit==1][is.na(cd4)]
    object[last_visit==1][cd4<0]
    
    (CD4_median_IQR_exit <- sprintf("%.3g (%.3g, %.3g)", 
                                    object[last_visit==1][!is.na(cd4) & cd4 >= 0 ][, median(cd4)],
                                    object[last_visit==1][!is.na(cd4) & cd4 >= 0 ][, fivenum(cd4)[c(2)]],
                                    object[last_visit==1][!is.na(cd4) & cd4 >= 0 ][, fivenum(cd4)[c(4)]]))
    
    
    
    # CD4 Categorial ----------------------------------------------------------
    
    # object[, cd4_cat:=cut(cd4, breaks = c(0, 200,349, 499, Inf), labels = c("<200 cells/ul","200-349 cells/ul", 
    #                                                                         "350-499 cells/ul",">500 cells/ul"), include.lowest = TRUE)]
    # object[, table(cd4_cat, useNA = "always")]
    # 
    # object[first_visit==1][, table(cd4_cat, useNA = "always")]
    # (CD4_categorical_number_percentage_1 <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(cd4_cat)][,sum(cd4_cat==levels(cd4_cat)[1])],
    #                                                 object[first_visit==1][!is.na(cd4_cat)][,100*sum(cd4_cat==levels(cd4_cat)[1])/ (.N)]))
    # 
    # (CD4_categorical_number_percentage_2 <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(cd4_cat)][,sum(cd4_cat==levels(cd4_cat)[2])],
    #                                                 object[first_visit==1][!is.na(cd4_cat)][,100*sum(cd4_cat==levels(cd4_cat)[2])/ (.N)]))
    # 
    # (CD4_categorical_number_percentage_3 <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(cd4_cat)][,sum(cd4_cat==levels(cd4_cat)[3])],
    #                                                 object[first_visit==1][!is.na(cd4_cat)][,100*sum(cd4_cat==levels(cd4_cat)[3])/ (.N)]))
    # 
    # (CD4_categorical_number_percentage_4 <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(cd4_cat)][,sum(cd4_cat==levels(cd4_cat)[4])],
    #                                                 object[first_visit==1][!is.na(cd4_cat)][,100*sum(cd4_cat==levels(cd4_cat)[4])/ (.N)]))
    
    object[, table(CD4)]
    # object[, cd4_cat:=cut(cd4, breaks = c(0, 350, Inf), labels = c("<350 cells/ul",">350 cells/ul"), include.lowest = TRUE)]
    # object[, table(cd4_cat, useNA = "always")]
    
    # object[first_visit==1][, table(cd4_cat, useNA = "always")]
    (CD4_categorical_number_percentage_1 <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(CD4)][,sum(CD4==levels(CD4)[1])],
                                                    object[first_visit==1][!is.na(CD4)][,100*sum(CD4==levels(CD4)[1])/ (.N)]))
    
    (CD4_categorical_number_percentage_2 <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(CD4)][,sum(CD4==levels(CD4)[2])],
                                                    object[first_visit==1][!is.na(CD4)][,100*sum(CD4==levels(CD4)[2])/ (.N)]))
    

    # HCVRNA (Entry Exit) -------------------
    
     
    (HCVRNA_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(HCVRNA_adj.num)][, sum(HCVRNA_adj.num)],
                                               object[first_visit==1][!is.na(HCVRNA_adj.num)][, 100*sum(HCVRNA_adj.num)/(.N)]))
    
    (HCVRNA_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][!is.na(HCVRNA_adj.num)][, sum(HCVRNA_adj.num)],
                                              object[last_visit==1][!is.na(HCVRNA_adj.num)][, 100*sum(HCVRNA_adj.num)/(.N)]))
    
    
    
    # HIV RNA, median (IQR) (log 10 copies/ml) (Entry Exit) -------------------
    
    names(object)
    object[first_visit==1][is.na(hivrna)]
    object[first_visit==1][hivrna<0]
    
    (hivrna_median_IQR_entry <- sprintf("%.2g (%.2g, %.2g)", object[first_visit==1][!is.na(hivrna) & hivrna >= 0 ][, median(log10(hivrna))],
                                        object[first_visit==1][!is.na(hivrna) & hivrna >= 0 ][, fivenum(log10(hivrna))[c(2)]],
                                        object[first_visit==1][!is.na(hivrna) & hivrna >= 0 ][, fivenum(log10(hivrna))[c(4)]]))
    
    object[last_visit==1][is.na(hivrna)]
    object[last_visit==1][hivrna<0]
    
    (hivrna_median_IQR_exit <- sprintf("%.2g (%.2g, %.2g)", 
                                       object[last_visit==1][!is.na(hivrna) & hivrna >= 0 ][, median(log10(hivrna))],
                                       object[last_visit==1][!is.na(hivrna) & hivrna >= 0 ][, fivenum(log10(hivrna))[c(2)]],
                                       object[last_visit==1][!is.na(hivrna) & hivrna >= 0 ][, fivenum(log10(hivrna))[c(4)]]))
    
    
    # HIV <50 copies (Entry and Exit) -----------------------------------------
    
    # HIVRNA_dich and HIVRNA_dich.1 are the same
    object[first_visit==1][, table(HIVRNA_dich, useNA = "always")]
    object[first_visit==1][, table(HIVRNA_dich.1, useNA = "always")]
    
    (HIV50_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][HIVRNA_dich.1!=99][!is.na(HIVRNA_dich.1)][, sum(HIVRNA_dich.1)],
                                              object[first_visit==1][HIVRNA_dich.1!=99][!is.na(HIVRNA_dich.1)][, 100*sum(HIVRNA_dich.1)/(.N)]))
    
    object[last_visit==1][, table(HIVRNA_dich.1, useNA = "always")]
    (HIV50_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][HIVRNA_dich.1!=99 & HIVRNA_dich.1!=2 ][!is.na(HIVRNA_dich.1)][, sum(HIVRNA_dich.1)],
                                             object[last_visit==1][HIVRNA_dich.1!=99 & HIVRNA_dich.1!=2][!is.na(HIVRNA_dich.1)][, 100*sum(HIVRNA_dich.1)/(.N)]))
    
    
    # On cART (Entry and Exit) -----------------------------------------
    
    names(object)
    
    object[first_visit==1][, table(onARV, useNA = "always")]
    object[last_visit==1][, table(onARV, useNA = "always")]
    
    (On_cART_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][onARV!=99][!is.na(onARV)][, sum(onARV)],
                                                object[first_visit==1][onARV!=99][!is.na(onARV)][, 100*sum(onARV)/(.N)]))
    
    
    (On_cART_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][onARV!=99 & onARV!=2 ][!is.na(onARV)][, sum(onARV)],
                                               object[last_visit==1][onARV!=99 & onARV!=2][!is.na(onARV)][, 100*sum(onARV)/(.N)]))
    
    
    
    # cART Naive (Entry and Exit) -----------------------------------------
    
    names(object)
    # DT$ARV_interruption %>% table(useNA = "al")
    # DT$onARV %>% table(useNA = "al")
    # DT$ARV_naive %>% table(useNA = "al")
    object[first_visit==1][, table(ARV_naive, useNA = "always")]
    object[last_visit==1][, table(ARV_naive, useNA = "always")]
    
    (cART_naive_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][ARV_naive!=99][!is.na(ARV_naive)][, sum(ARV_naive)],
                                                   object[first_visit==1][ARV_naive!=99][!is.na(ARV_naive)][, 100*sum(ARV_naive)/(.N)]))
    
    
    (cART_naive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][ARV_naive!=99 & ARV_naive!=2 ][!is.na(ARV_naive)][, sum(ARV_naive)],
                                                  object[last_visit==1][ARV_naive!=99 & ARV_naive!=2][!is.na(ARV_naive)][, 100*sum(ARV_naive)/(.N)]))
    
    
    # cART Interruption (Entry and Exit) -----------------------------------------
    
    names(object)
    
    # object[, table(ARV_interruption, useNA = "always")]
    # object[last_visit==1][, table(ARV_interruption, useNA = "always")]
    # DT[, table(ARV_interruption,visit, useNA = "always")]
    (cART_interruption_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][ARV_interruption!=99][!is.na(ARV_interruption)][, sum(ARV_interruption)],
                                                          object[first_visit==1][ARV_interruption!=99][!is.na(ARV_interruption)][, 100*sum(ARV_interruption)/(.N)]))
    
    
    (cART_interruption_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][ARV_interruption!=99 & ARV_interruption!=2 ][!is.na(ARV_interruption)][, sum(ARV_interruption)],
                                                         object[last_visit==1][ARV_interruption!=99 & ARV_interruption!=2][!is.na(ARV_interruption)][, 100*sum(ARV_interruption)/(.N)]))
    
    
    # Duration HCV infection ------------------------------------------
    
    object[first_visit==1][is.na(HCV_duration)]
    object[first_visit==1][HCV_duration<0]
    
    (HCV_duration_median_IQR <- sprintf("%.3g (%.2g, %.2g)", object[first_visit==1][!is.na(HCV_duration) & HCV_duration >= 0 ][, median(HCV_duration)],
                                        object[first_visit==1][!is.na(HCV_duration) & HCV_duration >= 0 ][, fivenum(HCV_duration)[c(2)]],
                                        object[first_visit==1][!is.na(HCV_duration) & HCV_duration >= 0 ][, fivenum(HCV_duration)[c(4)]]))
    
    
    # HCV treatment Naive (Entry and Exit) -----------------------------------------
    
    names(object)
    
    object[first_visit==1][, table(hcv_naive, useNA = "always")]
    object[first_visit==1][, table(hcv_naive_BL, useNA = "always")]
    object[last_visit==1][, table(hcv_naive, useNA = "always")]
    
    (HCV_treat_naive_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][hcv_naive!=99][!is.na(hcv_naive)][, sum(hcv_naive)],
                                                        object[first_visit==1][hcv_naive!=99][!is.na(hcv_naive)][, 100*sum(hcv_naive)/(.N)]))
    
    
    (HCV_treat_naive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][hcv_naive!=99 & hcv_naive!=2 ][!is.na(hcv_naive)][, sum(hcv_naive)],
                                                       object[last_visit==1][hcv_naive!=99 & hcv_naive!=2][!is.na(hcv_naive)][, 100*sum(hcv_naive)/(.N)]))
    
    
    
    # HCV Genotype  -----------------------------------------
    
    names(object)
    # HIVRNA_dich and HIVRNA_dich.1 are the same
    object[first_visit==1][, table(hcv_genotype, useNA = "always")]
    object[last_visit==1][, table(hcv_genotype, useNA = "always")]
    
    
    object[first_visit==1][grep("1|4",hcv_genotype)][,table(hcv_genotype, useNA = "always")] %>% as.data.table %>% select(N) %>% colSums
    
    
    (HCV_genotype_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][hcv_genotype!=-99][!is.na(hcv_genotype)][, sum(grepl("1|4",hcv_genotype))],
                                               object[first_visit==1][hcv_genotype!=-99][!is.na(hcv_genotype)][, 100*sum(grepl("1|4",hcv_genotype))/(.N)]))
    
    
    # APRI>1.5 (Entry and Exit) -----------------------------------------
    
    names(object)
    
    object[first_visit==1][, table(APRI_dich.1, useNA = "always")]
    object[last_visit==1][, table(APRI_dich.1, useNA = "always")]
    
    (APRI_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][APRI_dich.1!=99][!is.na(APRI_dich.1)][, sum(APRI_dich.1)],
                                             object[first_visit==1][APRI_dich.1!=99][!is.na(APRI_dich.1)][, 100*sum(APRI_dich.1)/(.N)]))
    
    
    (APRI_naive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][APRI_dich.1!=99 & APRI_dich.1!=2 ][!is.na(APRI_dich.1)][, sum(APRI_dich.1)],
                                                  object[last_visit==1][APRI_dich.1!=99 & APRI_dich.1!=2][!is.na(APRI_dich.1)][, 100*sum(APRI_dich.1)/(.N)]))
    
    
    
    # ESLD Diagnosis (Entry and Exit) -----------------------------------------
    
    names(object)
    
    object[first_visit==1][, table(ESLD, useNA = "always")]
    object[last_visit==1][, table(ESLD, useNA = "always")]
    
    (ESLD_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][ESLD!=99][!is.na(ESLD)][, sum(ESLD)],
                                             object[first_visit==1][ESLD!=99][!is.na(ESLD)][, 100*sum(ESLD)/(.N)]))
    
    
    (ESLD_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][ESLD!=99 & ESLD!=2 ][!is.na(ESLD)][, sum(ESLD)],
                                            object[last_visit==1][ESLD!=99 & ESLD!=2][!is.na(ESLD)][, 100*sum(ESLD)/(.N)]))
    
    
    # Province --------------------------------------------------------------
    
    # these are the same
    object[first_visit==1][, table(province, useNA = "always")]
    object[last_visit==1][, table(province, useNA = "always")]
    
    (Province_Alberta <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(province)][, sum(province=="Alberta")],
                                object[first_visit==1][!is.na(province)][, 100*sum(province=="Alberta")/(.N)]))
    (Province_British_Columbia <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(province)][, sum(province=="British_Columbia")],
                                 object[first_visit==1][!is.na(province)][, 100*sum(province=="British_Columbia")/(.N)]))
    (Province_Nova_Scotia <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(province)][, sum(province=="Nova_Scotia")],
                                 object[first_visit==1][!is.na(province)][, 100*sum(province=="Nova_Scotia")/(.N)]))
    (Province_Ontario <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(province)][, sum(province=="Ontario")],
                                 object[first_visit==1][!is.na(province)][, 100*sum(province=="Ontario")/(.N)]))
    (Province_Quebec <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(province)][, sum(province=="Quebec")],
                                 object[first_visit==1][!is.na(province)][, 100*sum(province=="Quebec")/(.N)]))
    (Province_Saskatchewan <- sprintf("%g (%.2g)", object[first_visit==1][!is.na(province)][, sum(province=="Saskatchewan")],
                                 object[first_visit==1][!is.na(province)][, 100*sum(province=="Saskatchewan")/(.N)]))
    
    
    
    tab <- rbind(
        ` ` = title,
        `Follow-up time, median (IQR) (years)` = FUT_median_IQR,
        ` ` = "Characteristics at cohort entry",
        `Age, median (IQR) (years)` = Age_median_IQR_entry,
        `Female, no. (%)` = Female_number_percentage,
        `Aboriginal, no. (%)` = Aboriginal_number_percentage,
        `Greater than high school education, no. (%)` = HighSchool_number_percentage,
        `Gross monthly income >$1500, no. (%)` = Income_number_percentage,
        `History of IDU, no. (%)` = IDUhist_number_percentage,
        `Active IDU, no. (%)` = IDUActive_number_percentage_entry,
        `History of alcohol use, no. (%)` = Alcoholhist_number_percentage,
        `Current alcohol use, no. (%)` = AlcoholActive_number_percentage_entry,
        `Ever smoked cigarettes, no. (%)` = Smoking_number_percentage,
        `Current smoker, no. (%)` = Smoking_number_percentage_entry,
        `Time since HIV diagnosis, median (IQR) (years)` = HIV_time_median_IQR,
        `Prior AIDS diagnosis, no. (%)` = Aids_number_percentage_entry,
        `Nadir CD4 þ cell count, median (IQR) (cells/ml)` = Nadir_CD4_median_IQR,
        `CD4+ cell count, median (IQR) (cells/ml)` = CD4_median_IQR_entry,
        `CD4+ cell count (categorical), no. (%)` = " ",
        `\t<350 cells/ml` = CD4_categorical_number_percentage_1,
        `\t>350 cells/ml` = CD4_categorical_number_percentage_2,
        `HCVRNA positive, no. (%)` = HCVRNA_number_percentage_entry,
        `HIV RNA, median (IQR) (log 10 copies/ml)` = hivrna_median_IQR_entry,
        `HIV RNA <50 copies/ml, no. (%)` = HIV50_number_percentage_entry,
        `On cART, no. (%)` = On_cART_number_percentage_entry,
        `cART-naive, no. (%)` = cART_naive_number_percentage_entry,
        `cART interruption, no. (%)` = cART_interruption_number_percentage_entry,
        `Duration HCV infection, median (IQR) (years)` = HCV_duration_median_IQR,
        `HCV treatment naive, no. (%)` = HCV_treat_naive_number_percentage_entry,
        `HCV genotype (1 and 4), no. (%)` = HCV_genotype_number_percentage,
        `APRI > 1.5, no. (%)` = APRI_number_percentage_entry,
        `Prior ESLD diagnosis, no. (%)` = ESLD_number_percentage_entry,
        `Province, no. (%)` = " ",
        `\tBritish Columbia` = Province_British_Columbia,
        `\tAlberta` = Province_Alberta,
        `\tSaskatchewan` = Province_Saskatchewan,
        `\tOntario` = Province_Ontario,
        `\tQuebec` = Province_Quebec,
        `\tNova Scotia` = Province_Nova_Scotia,
        ` ` = "Characteristics at last visit",
        `Age, median (IQR) (years)` = Age_median_IQR_exit,
        `Active IDU, no. (%)` = IDUActive_number_percentage_exit,
        `Alcohol use, no. (%)` = AlcoholActive_number_percentage_exit,
        `Smoke cigarettes, no. (%)` = Smoking_number_percentage_exit,
        `AIDS diagnosis, no. (%)` = Aids_number_percentage_exit,
        `CD4 + cell count, median (IQR) (cells/ml)` = CD4_median_IQR_exit,
        `HCVRNA positive, no. (%)` = HCVRNA_number_percentage_exit,
        `HIV RNA, median (IQR) (log 10 copies/ml)` = hivrna_median_IQR_exit,
        `HIV RNA <50 copies/ml, no. (%)` = HIV50_number_percentage_exit,
        `On cART, no. (%)` = On_cART_number_percentage_exit,
        `cART naive, no. (%)` = cART_naive_number_percentage_exit,
        `cART interruption, no. (%)` = cART_interruption_number_percentage_exit,
        `HCV treatment naive, no. (%)` = HCV_treat_naive_number_percentage_exit,
        `APRI > 1.5, no. (%)` = APRI_naive_number_percentage_exit,
        `ESLD diagnosis, no. (%)` = ESLD_number_percentage_exit)
    
    return(tab)
}


DT_table1 %>% colnames
DT_table1[first_visit==1][!is.na(HCVRNA_adj.num)][, sum(HCVRNA_adj.num)]
DT_table1[first_visit==1]
DT_table1[first_visit==1][!is.na(HCVRNA_adj.num)][, table(HCVRNA_adj.num, APRI_dich, useNA = "always")]

tab1_total <- table1_fun(object = DT_table1, title = "Total (N = 1634)")
tab1_death <- table1_fun(object = DT_table1[death==1], title = "Death (N = 273)")
tab1_alive <- table1_fun(object = DT_table1[death==0], title = "Alive (N = 1361)")

tab1_esld <- table1_fun(object = DT_table1[unique_id %in% unique(DT_table1[multinomOutcome=="ESLD"]$unique_id)], 
                        title = "ESLD (N = 46)")

tab1_Smoking <- table1_fun(object = DT_table1[unique_id %in% unique(DT_table1[multinomOutcome=="Smoking"]$unique_id)], 
                           title = "Smoking (N = 41)")

tab1_Overdose <- table1_fun(object = DT_table1[unique_id %in% unique(DT_table1[multinomOutcome=="Overdose"]$unique_id)], 
                         title = "Overdose (N = 49)")

tab1_Other <- table1_fun(object = DT_table1[unique_id %in% unique(DT_table1[multinomOutcome=="Other"]$unique_id)], 
                         title = "Other (N = 83)")

tab1_Unknown <- table1_fun(object = DT_table1[unique_id %in% unique(DT_table1[multinomOutcome=="Unknown"]$unique_id)], 
                           title = "Unknown (N = 54)")
## ---- table-1-final ----

pander::pander(cbind(tab1_total,tab1_death, tab1_alive),
               split.cells = c(10,20,20,20),
               split.table = Inf)


## ---- table-1-COD ----

# DT_table1[, table(multinomOutcome)]

pander::pander(cbind(tab1_total,tab1_death, tab1_alive, tab1_esld, tab1_Smoking,tab1_Overdose ,tab1_Other, tab1_Unknown),
               # split.cells = c(2,4,4,4,4,4),  
               split.table = Inf)


## ---- current-smoke-idu ----

DT_current_smoke <- copy(DT_final)
key(DT_current_smoke)
setkey(DT_current_smoke, "unique_id")
key(DT_current_smoke)
unique(DT_current_smoke, by="unique_id")
uDT1 <- unique(DT_current_smoke, by="unique_id")

# Determine the first and last visit for each subject
uDT <- unique(DT_current_smoke, by="unique_id")
DT_current_smoke[, c("first_visit","last_visit"):=0L]
DT_current_smoke[uDT, first_visit:=1L, mult="first"]
DT_current_smoke[uDT, last_visit:=1L, mult="last"]

DT_current_smoke[last_visit==1]
DT_current_smoke[last_visit==1][, table(multinomOutcome)]



current_smoke_idu <- function(object, age, period) {
    # age = "20-49"
    # object <- DT_current_smoke
    
    # ================================
    
    # IDU current (Entry and Exit) ----------------------------------------------------
    object[first_visit==1][, table(idu_6m, useNA = "always")]
    object[last_visit==1][, table(idu_6m, useNA = "always")]
    (IDUActive_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][idu_6m!=99][!is.na(idu_6m)][, sum(idu_6m)],
                                                  object[first_visit==1][idu_6m!=99][!is.na(idu_6m)][, 100*sum(idu_6m)/(.N)]))
    
    (IDUActive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][idu_6m!=99][!is.na(idu_6m)][, sum(idu_6m)],
                                                 object[last_visit==1][idu_6m!=99][!is.na(idu_6m)][, 100*sum(idu_6m)/(.N)]))
    

    # Smoker (Ever smoker) and current smoker ----------------------------------------------------
    object[first_visit==1][, table(smoke, useNA = "always")]
    object[last_visit==1][, table(smoke, useNA = "always")]
    
    # smoke: ever smoke cigarettes: 1 = yes, 0 = no
    (Smoking_number_percentage <- sprintf("%g (%.2g)", object[first_visit==1][smoke!=99][!is.na(smoke)][, sum(smoke)],
                                          object[first_visit==1][smoke!=99][!is.na(smoke)][, 100*sum(smoke)/(.N)]))
    
    (Smoking_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, sum(smoke_curr)],
                                                object[first_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, 100*sum(smoke_curr)/(.N)]))
    
    object[last_visit==1][, table(smoke_curr, useNA = "always")]
    (Smoking_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, sum(smoke_curr)],
                                               object[last_visit==1][smoke_curr!=99][!is.na(smoke_curr)][, 100*sum(smoke_curr)/(.N)]))
    
    
    # Alcohol (Entry and Exit) ----------------------------------------------------
    object[first_visit==1][, table(etoh, useNA = "always")]
    (AlcoholActive_number_percentage_entry <- sprintf("%g (%.2g)", object[first_visit==1][etoh!=99][!is.na(etoh)][, sum(etoh)],
                                                      object[first_visit==1][etoh!=99][!is.na(etoh)][, 100*sum(etoh)/(.N)]))
    
    object[last_visit==1][, table(etoh, useNA = "always")]
    (AlcoholActive_number_percentage_exit <- sprintf("%g (%.2g)", object[last_visit==1][etoh!=99 & etoh!=2 ][!is.na(etoh)][, sum(etoh)],
                                                     object[last_visit==1][etoh!=99 & etoh!=2][!is.na(etoh)][, 100*sum(etoh)/(.N)]))
    

    tab <- rbind(
        ` ` = sprintf("Characteristics at cohort entry Age %s, Period %s", age, period),
        `Active IDU, no. (%)` = IDUActive_number_percentage_entry,
        `Current alcohol use, no. (%)` = AlcoholActive_number_percentage_entry,
        `Current smoker, no. (%)` = Smoking_number_percentage_entry,
         ` ` = sprintf("Characteristics at last visit Age %s, Period %s", age, period),
        `Active IDU, no. (%)` = IDUActive_number_percentage_exit,
        `Alcohol use, no. (%)` = AlcoholActive_number_percentage_exit,
        `Smoke cigarettes, no. (%)` = Smoking_number_percentage_exit)
    
    return(tab)
    
    }


DT_current_smoke[first_visit==1][, table(age.f, period.f)]
DT_current_smoke[last_visit==1][, table(age.f, period.f)]

age_low_period_early <- current_smoke_idu(object = DT_current_smoke[age.f %in% "(20,50]"][period.f %in% "[2003,2012]"], 
                  age = "(20,49]", 
                  period = "[2003,2012]")
age_low_period_late <- current_smoke_idu(object = DT_current_smoke[age.f %in% "(20,50]"][period.f %in% "[2013,2017]"], 
                  age = "(20,49]", 
                  period = "[2013,2017]")
age_high_period_early <- current_smoke_idu(object = DT_current_smoke[age.f %in% "(50,80]"][period.f %in% "[2003,2012]"], 
                  age = "(50,80]", 
                  period = "[2003,2012]")
age_high_period_late <- current_smoke_idu(object = DT_current_smoke[age.f %in% "(50,80]"][period.f %in% "[2013,2017]"], 
                  age = "(50,80]", 
                  period = "[2013,2017]")

## ---- current-smoke-idu-table ----


cbind(age_low_period_early, age_low_period_late) %>% pander::pander(split.table = Inf)

## ---- current-smoke-idu-table2 ----

cbind(age_high_period_early, age_high_period_late) %>% pander::pander(split.table = Inf)

## ---- table-2-calculations ----

object <- copy(DT_table1)
names(DT_table1)

Overall <- nrow(DT_table1[first_visit==1][death==1])

object[, table(female, useNA = "always")]
(Men <- sprintf("%g (%.2g)", object[first_visit==1][death==1][female==0][,.N],
                object[first_visit==1][death==1][female==0][,.N]/Overall))

(Women <- sprintf("%g (%.2g)", object[first_visit==1][death==1][female==1][,.N],
                object[first_visit==1][death==1][female==1][,.N]/Overall))


object[first_visit==1][death==1][, table(aboriginal, useNA = "always")]

(Aboriginal <- sprintf("%g (%.2g)", object[first_visit==1][death==1][aboriginal==1][,.N],
                object[first_visit==1][death==1][aboriginal==1][,.N]/Overall))

(NonAboriginal <- sprintf("%g (%.2g)", object[first_visit==1][death==1][aboriginal==0][,.N],
                       object[first_visit==1][death==1][aboriginal==0][,.N]/Overall))

(ESLD <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="ESLD"][,.N],
                       object[last_visit==1][death==1][multinomOutcome=="ESLD"][,.N]/Overall))


(SmokingRelated <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Smoking"][,.N],
                 object[last_visit==1][death==1][multinomOutcome=="Smoking"][,.N]/Overall))


object[last_visit==1][death==1][multinomOutcome=="Smoking"][, table(classification_cod)]
object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("PNEU|TALCOSIS|POSSIBLE", primary_cod)]
object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("RESP", classification_cod)]
object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("CANCER", classification_cod)]
object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("CVD", classification_cod)]


(SmokingCVD <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("CVD", classification_cod)][,.N],
                       object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("CVD", classification_cod)][,.N]/Overall))

(SmokingCancer <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("CANCER", classification_cod)][,.N],
                       object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("CANCER", classification_cod)][,.N]/Overall))

(SmokingPneumonia <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("PNEU|TALCOSIS|POSSIBLE", primary_cod)][,.N],
                             object[last_visit==1][death==1][multinomOutcome=="Smoking"][grepl("PNEU|TALCOSIS|POSSIBLE", primary_cod)][,.N]/Overall))

(Overdose <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Overdose"][,.N],
                  object[last_visit==1][death==1][multinomOutcome=="Overdose"][,.N]/Overall))

(Other <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][,.N],
                           object[last_visit==1][death==1][multinomOutcome=="Other"][,.N]/Overall))


object[last_visit==1][death==1][multinomOutcome=="Other"][, table(classification_cod)]
object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="OTHER"]

(OtherAIDS <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="AIDS"][,.N],
                  object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="AIDS"][,.N]/Overall))

(OtherCancer <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="CANCER"][,.N],
                      object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="CANCER"][,.N]/Overall))

# (OtherDrug <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="OVERDOSE"][,.N],
#                         object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="OVERDOSE"][,.N]/Overall))

(OtherSuicide <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="SUICIDE/TRAUMA/ACCIDENT"][,.N],
                      object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="SUICIDE/TRAUMA/ACCIDENT"][,.N]/Overall))

(OtherInfection <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="INFECTION"][,.N],
                         object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="INFECTION"][,.N]/Overall))

(OtherOther <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="OTHER"][,.N],
                           object[last_visit==1][death==1][multinomOutcome=="Other"][classification_cod=="OTHER"][,.N]/Overall))


(Unknown <- sprintf("%g (%.2g)", object[last_visit==1][death==1][multinomOutcome=="Unknown"][,.N],
                  object[last_visit==1][death==1][multinomOutcome=="Unknown"][,.N]/Overall))

tab2 <- rbind(
` ` = "# of deaths (%)",    
`Overall` = Overall,
# `Men` = Men,
# `Women` = Women,
# `Aboriginal` = Aboriginal,
# `Non-Aboriginal` = NonAboriginal,
`ESLD` = ESLD,
`Smoking-related deaths` = "",
`\tCVD` = SmokingCVD,
`\tLung Cancer` = SmokingCancer,
`\tPneumonia` = SmokingPneumonia,
`Overdose` = Overdose,
`Other` = "",
`\tAIDS-related deaths` = OtherAIDS,
`\tSuicide/trauma/accident` = OtherSuicide,
`\tCancers (non-liver, non-HIV, non-esophageal/lung)` = OtherCancer,
`\tInfections` = OtherInfection,
`\tOther` = OtherOther,
`Unknown` = Unknown)


## ---- table-2-final ----

pander::pander(tab2,
               split.table = Inf)



## ---- New-Lexis-Plots ----

# unique(DT_lexis)[, table(classification_cod)] %>% as.data.table() %>% use_series(N) %>% sum
# unique(DT_lexis)[, table(classification_cod)] %>% as.data.table()
# unique(DT_lexis)
# DT_lcoh[, table(classification_cod)]
# DT_lcoh[,table(multinomOutcome)]


# DT_lexis[, Cause:=factor(classification_cod, 
#                          levels = c("AIDS", "CANCER", "CVD", "ESLD",
#                                     "INFECTION", "OTHER", "OVERDOSE",
#                                     "SUICIDE/TRAUMA/ACCIDENT","UNKNOWN"),
#                          labels = c("AIDS (5)", "CANCER (21)", "CVD (13)", "ESLD (40)",
#                                     "INFECTION (21)", "OTHER (5)", "OVERDOSE (24)",
#                                     "SUICIDE/TRAUMA/ACCIDENT (9)","UNKNOWN (40)"))]

ggplot(DT_lcoh, aes(x=entry, xend=exit, y=age, yend=exit-birth)) + xlab("Calendar time")+
    scale_x_continuous(breaks = seq(2003,2017,1)) + 
    scale_y_continuous(breaks = seq(20,85,10)) +
    geom_segment(size=.4, colour="grey") +
    geom_vline(xintercept = 2012, size = 1, linetype = "twodash", col = "black") + 
    geom_hline(yintercept = 50, size = 1, linetype = "twodash", col = "black") +
    geom_point(aes(x = exit, y = exit-birth, colour = multinomOutcome),size=3, 
               data = DT_lcoh[death==1][multinomOutcome %ni% "Alive"]) + 
    scale_color_brewer(palette = "Set1") + theme(legend.position = "bottom") + 
    theme(legend.title = element_blank())


## ---- rates-by-time ----

DT_lexis[, Cause:=multinomOutcome]


p <- lapply(DT_lexis[,levels(multinomOutcome)][-1], 
            function(i) calc_rate(DT_lexis, i , split = "time", 
                                  time.breaks = c(cal.yr(dmy("01-04-2003")),
                                                  cal.yr(dmy("31-12-2012")),
                                                  cal.yr(dmy("31-12-2017"))),
                                  per = 10^3
            )
)


DT_rate_time <- do.call(rbind,p) %>% as.data.table()
# DT_rate_time[, sum(events)]
# DT_rate_time$period %>% table

DT_rate_time[, `:=`(period = factor(period, 
                                    levels = c("(-Inf,2003.24572210815]",
                                               "(2003.24572210815,2012.99794661191]",
                                               "(2012.99794661191,2017.99726214921]",
                                               "(2017.99726214921,Inf]"), 
                                    labels = c("less", "[2003-2012]", 
                                               "[2013-2017]","more") ), 
                    ID = paste0(outcome, period))]


rate_by_time <- ggplot(DT_rate_time[period %ni% c("less","more")], 
                       aes(x = period, y = rate, 
                           color = outcome,
                           group = outcome)) + 
    # scale_y_continuous(breaks = seq(0,9,1)) +
    geom_path(size=1.2) + theme_bw() + 
    geom_point(size=2) + 
    theme(legend.position = "bottom") + 
    ylab("events per 1000 person years") +
    scale_color_brewer(palette = "Set1") 


## ---- rates-by-age ----

p <- lapply(DT_lexis[,levels(Cause)][-1], 
            function(i) calc_rate(DT_lexis, i , split = "age", 
                                  age.breaks = c(20,49.999999,80),
                                  per = 10^3
            )
)

DT_rate_age <- do.call(rbind,p) %>% as.data.table()

DT_rate_age[, `:=`(age = factor(age, 
                                levels = c("(-Inf,20]",
                                           "(20,49.999999]",
                                           "(49.999999,80]",
                                           "(80,Inf]"), 
                                labels = c("less", "[20-49]", "[50-80]","more") ), 
                   ID = paste0(outcome, age))]

rate_by_age <- ggplot(DT_rate_age[age %ni% c("less","more")], 
                      aes(x = age, y = rate, 
                          color = outcome,
                          group = outcome)) + 
    # scale_y_continuous(breaks = seq(0,12,1)) +
    geom_path(size=1.2) + theme_bw() + 
    geom_point(size=2) +
    theme(legend.position = "bottom") + 
    ylab("events per 1000 person years") +
    scale_color_brewer(palette = "Set1") 

## ---- rates-by-time-age ----

p <- lapply(DT_lexis[,levels(Cause)][-1], 
            function(i) calc_rate(DT_lexis, i , split = "both", 
                                  age.breaks = c(20,49.999999,80),
                                  time.breaks = c(cal.yr(dmy("01-04-2003")),
                                                  cal.yr(dmy("31-12-2012")),
                                                  cal.yr(dmy("31-12-2017"))),
                                  per = 10^3
            )
)
DT_rate_time_age <- do.call(rbind,p) %>% as.data.table()
DT_rate_time_age[, `:=`(age = factor(age, 
                                     levels = c("(-Inf,20]",
                                                "(20,49.999999]",
                                                "(49.999999,80]",
                                                "(80,Inf]"), 
                                     labels = c("less", "[20-49]", "[50-80]","more") ),
                        period = factor(period, 
                                        levels = c("(-Inf,2003.24572210815]",
                                                   "(2003.24572210815,2012.99794661191]",
                                                   "(2012.99794661191,2017.99726214921]",
                                                   "(2017.99726214921,Inf]"), 
                                        labels = c("less", "[2003-2012]", 
                                                   "[2013-2017]","more") ),
                        ID = paste0(outcome, period, age))]

rate_by_time_age <- ggplot(DT_rate_time_age[age %ni% c("less","more")][period %ni% c("less","more")], 
                           aes(x = period, y = rate, 
                               color = outcome,
                               group = outcome)) +
    facet_grid(~age) + 
    # scale_y_continuous(breaks = seq(0,15,1)) +
    geom_path(size=1.2) + theme_bw() + 
    geom_point(size=2) +
    theme(legend.position = "bottom") + 
    ylab("events per 1000 person years")+
    scale_color_brewer(palette = "Set1") 

# ---- rates-all ----

#USED IN Manuscript
DT_rate_time[, `:=`(age = "All Ages")]
DT_rate_time[, `:=`(ID = paste0(outcome,period, age))]
setcolorder(DT_rate_time, colnames(DT_rate_time_age))

DT_rate_all <- rbindlist(list(DT_rate_time,DT_rate_time_age))

DT_rate_all[, `:=`(period=droplevels(period))]
# DT_rate_all[, table(period)]
# DT_rate_all[outcome=="Other"]


DT_rate_all[, outcome:=factor(outcome, levels = c("ESLD","Smoking","Overdose","Other","Unknown"))]

p_rate <- ggplot(DT_rate_all[age %ni% c("less","more")][period %ni% c("less","more")], 
       aes(x = period, y = rate, 
           color = outcome,
           group = outcome)) +
    facet_grid(~age) + 
    # scale_y_continuous(breaks = seq(0,15,1)) +
    geom_path(size=1.2) + theme_bw() + 
    geom_point(size=2) +
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 15, face = "bold"),
          strip.text.y = element_text(size = 15, face = "bold"),
          legend.text=element_text(size=14, face = "bold"),
          axis.text.x = element_text(size=13, face = "bold"),
          axis.text.y = element_text(size=13, face = "bold"),
          axis.title=element_text(size=16, face = "bold")) + 
    guides(colour = guide_legend(nrow = 1)) + 
    ylab("events per 1000 person years") +
    scale_y_continuous(breaks = seq(0,27,3)) +
    scale_color_brewer(palette = "Set1") +
    xlab("")

# cowplot::save_plot(plot = p_rate,filename = "manuscript/figures_tables/raw_event_rates.png",
                   # base_width = 10, base_height = 8)




## ---- outcome-categories ----

outcomeDT <- DT_lexis[multinomOutcome!="Alive"][,c("multinomOutcome", "classification_cod","primary_cod"),with = F][order(multinomOutcome)] %>% 
    magrittr::set_colnames(c("multinomOutcome", "Classification COD","Primary COD"))

xtabCategories <- xtable::xtable(outcomeDT,
caption = "Classification of outcome. \\texttt{multinomOutcome} represents the classification status used in this analysis", label = "tab:classification")

add.to.row <- list(pos = list(0), command = NULL)
command <- paste0("\\hline\n\\endhead\n",
                  "\\hline\n",
                  "\\multicolumn{", dim(outcomeDT)[2] + 1, "}{l}",
                  "{\\footnotesize Continued on next page}\n",
                  "\\endfoot\n",
                  "\\endlastfoot\n")
add.to.row$command <- command

print(xtabCategories, 
      sanitize.text.function=identity, 
      booktabs = TRUE,
      size = "\\setlength{\\tabcolsep}{10pt}",
      latex.environments = "center",
      table.placement = "H", 
      include.rownames = T,
      hline.after=c(-1), add.to.row = add.to.row,
      tabular.environment = "longtable")


## ---- plot-coef-results ----

fit_vglm_plot_conf <- cbind(exp(cbind(coef(fit_vglm),confint(fit_vglm))),
                             signif(summary(fit_vglm)@coef3[,4],4)) %>% 
    as.data.table(keep.rownames=T) %>% 
    tidyr::separate(rn, c("variable","outcome"), sep=":") %>% 
    magrittr::set_colnames(c("predictor","outcome","OR", 
                             "lower", "upper","p.value")) %>% 
    dplyr::mutate(outcome = factor(outcome, levels = 1:5, 
                                   labels = c("ESLD","Smoking","Overdose",
                                              "Other","Unknown"))) %>% as.data.table()

fit_vglm_plot_conf[predictor %in% "period.f(2013,2017]", predictor:="period\n[2013,2017]"]
fit_vglm_plot_conf[predictor %in% "age.f(50,80]", predictor:="age\n(50,80]"]

p_coef_model <- ggplot(fit_vglm_plot_conf[predictor %ni% "(Intercept)"], 
       aes(x = predictor, y = OR, ymin = lower, ymax = upper)) +
    geom_pointrange(#aes(col = factor(model)), 
        position=position_dodge(width=0.30)) +
    coord_flip() +
    ylab("Hazard ratio (HR) & 95% CI") +
    geom_hline(aes(yintercept = 1), linetype = "dotted") +
    scale_color_discrete(name = "Outcome") + xlab("") + theme_bw() + 
    theme(legend.position = "bottom", axis.text.y = element_text(size=10),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    facet_grid(~outcome) + 
    geom_text(aes(label=paste0("HR = ", signif(OR,2)," [",signif(lower,2),",",
                              signif(upper,2),"]",
                              "\n     p = ", signif(p.value,2))), 
              vjust=2.0, color='black', position=position_dodge(.1),
              hjust=-0.0, size=4)


## ---- coef-results-table ----

fit_vglm_plot_conf[predictor %ni% "(Intercept)"] %>% pander::pander(digits = 2)


## ---- data-for-forest-plot ----
coef_dat <- fit_vglm_plot_conf[predictor %ni% "(Intercept)"]

# row_names <- list(
#     list("Age (50, 80]","Period [2010, 2016]"))
# 
# 
# # ESLD coefficient for age and period 
# coef1 <- coef_dat[outcome %in% "ESLD"]$OR
# low1 <- coef_dat[outcome %in% "ESLD"]$lower
# high1 <- coef_dat[outcome %in% "ESLD"]$upper
# 
# # Smoking coef
# coef2 <- coef_dat[outcome %in% "Smoking"]$OR
# low2 <- coef_dat[outcome %in% "Smoking"]$lower
# high2 <- coef_dat[outcome %in% "Smoking"]$upper
# 
# # Smoking coef
# coef3 <- coef_dat[outcome %in% "Other"]$OR
# low3 <- coef_dat[outcome %in% "Other"]$lower
# high3 <- coef_dat[outcome %in% "Other"]$upper
# 
# # Unknown coef
# coef4 <- coef_dat[outcome %in% "Unknown"]$OR
# low4 <- coef_dat[outcome %in% "Unknown"]$lower
# high4 <- coef_dat[outcome %in% "Unknown"]$upper
# 
# coef <- cbind(coef1, coef2, coef3, coef4)
# low <- cbind(low1, low2, low3, low4)
# high <- cbind(high1, high2, high3, high4)


tabtext_age <- c()
tabtext_period <- c()
tabtext_HIVRNA <- c()
tabtext_APRI <- c()
tabtext_CD4 <- c()
tabtext_HCVRNA <- c()

for (j in c("ESLD","Smoking","Overdose","Other", "Unknown")) {
    
    temp_age <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
                                          coef_dat[predictor %in% "age\n(50,80]" & outcome %in% j, OR],
                                          coef_dat[predictor %in% "age\n(50,80]" & outcome %in% j, lower],
                                          coef_dat[predictor %in% "age\n(50,80]" & outcome %in% j, upper]))
    
    tabtext_age <- rbind(tabtext_age, temp_age)
    
    temp_period <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
                                             coef_dat[predictor %in% "period.f[2013,2017]" & outcome %in% j, OR],
                                             coef_dat[predictor %in% "period.f[2013,2017]" & outcome %in% j, lower],
                                             coef_dat[predictor %in% "period.f[2013,2017]" & outcome %in% j, upper]))
    
    tabtext_period <- rbind(tabtext_period, temp_period)
    
    temp_HIVRNA <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
                                             coef_dat[predictor %in% "HIVRNA_dich>=50" & outcome %in% j, OR],
                                             coef_dat[predictor %in% "HIVRNA_dich>=50" & outcome %in% j, lower],
                                             coef_dat[predictor %in% "HIVRNA_dich>=50" & outcome %in% j, upper]))
    
    tabtext_HIVRNA <- rbind(tabtext_HIVRNA, temp_HIVRNA)
    
    temp_APRI <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
                                             coef_dat[predictor %in% "APRI_dich>=1.5" & outcome %in% j, OR],
                                             coef_dat[predictor %in% "APRI_dich>=1.5" & outcome %in% j, lower],
                                             coef_dat[predictor %in% "APRI_dich>=1.5" & outcome %in% j, upper]))
    
    tabtext_APRI <- rbind(tabtext_APRI, temp_APRI)
    
    temp_CD4 <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
                                             coef_dat[predictor %in% "CD4<350 cells/ul" & outcome %in% j, OR],
                                             coef_dat[predictor %in% "CD4<350 cells/ul" & outcome %in% j, lower],
                                             coef_dat[predictor %in% "CD4<350 cells/ul" & outcome %in% j, upper]))
    
    tabtext_CD4 <- rbind(tabtext_CD4, temp_CD4)
    
    # temp_HCVRNA <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
    #                                          coef_dat[predictor %in% "HCVRNA_adjpositive" & outcome %in% j, OR],
    #                                          coef_dat[predictor %in% "HCVRNA_adjpositive" & outcome %in% j, lower],
    #                                          coef_dat[predictor %in% "HCVRNA_adjpositive" & outcome %in% j, upper]))
    
    temp_HCVRNA <- c(paste0("\t",j), sprintf("%#.2f (%#.2f - %#.2f)", 
                                             coef_dat[predictor %in% "HCVRNA_last_visitpositive" & outcome %in% j, OR],
                                             coef_dat[predictor %in% "HCVRNA_last_visitpositive" & outcome %in% j, lower],
                                             coef_dat[predictor %in% "HCVRNA_last_visitpositive" & outcome %in% j, upper]))
    
    tabtext_HCVRNA <- rbind(tabtext_HCVRNA, temp_HCVRNA)
    
}

# tabtext_final <- rbind(c("Age [50 - 80]","HR (95% CI)"),tabtext_age,
#                        c("Period [2013, 2017]",NA),tabtext_period,
#                        c("HIVRNA > 50",NA),tabtext_HIVRNA,
#                        c("APRI > 1.5",NA),tabtext_APRI,
#                        c("CD4 < 350 cells/ul",NA),tabtext_CD4,
#                        c("HCVRNA Positive",NA),tabtext_HCVRNA)

tabtext_final <- rbind(c("Period [2013, 2017]","aHR (95% CI)"),tabtext_period,
                       c("HCVRNA Positive",NA),tabtext_HCVRNA,
                       c("Age [50 - 80]",NA),tabtext_age)

# coef_data_final <- cbind(mean = c(NA, coef_dat[predictor %in% "age\n(50,80]"]$OR, 
#                                   NA, coef_dat[predictor %in% "period.f[2013,2017]"]$OR,
#                                   NA, coef_dat[predictor %in% "HIVRNA_dich>=50"]$OR,
#                                   NA, coef_dat[predictor %in% "APRI_dich>=1.5"]$OR,
#                                   NA, coef_dat[predictor %in% "CD4<350 cells/ul"]$OR,
#                                   NA, coef_dat[predictor %in% "HCVRNA_last_visitpositive"]$OR),
#                          lower = c(NA, coef_dat[predictor %in% "age\n(50,80]"]$lower, 
#                                    NA, coef_dat[predictor %in% "period.f[2013,2017]"]$lower,
#                                    NA, coef_dat[predictor %in% "HIVRNA_dich>=50"]$lower,
#                                    NA, coef_dat[predictor %in% "APRI_dich>=1.5"]$lower,
#                                    NA, coef_dat[predictor %in% "CD4<350 cells/ul"]$lower,
#                                    NA, coef_dat[predictor %in% "HCVRNA_last_visitpositive"]$lower),
#                          upper = c(NA, coef_dat[predictor %in% "age\n(50,80]"]$upper, 
#                                    NA, coef_dat[predictor %in% "period.f[2013,2017]"]$upper,
#                                    NA, coef_dat[predictor %in% "HIVRNA_dich>=50"]$upper,
#                                    NA, coef_dat[predictor %in% "APRI_dich>=1.5"]$upper,
#                                    NA, coef_dat[predictor %in% "CD4<350 cells/ul"]$upper,
#                                    NA, coef_dat[predictor %in% "HCVRNA_last_visitpositive"]$upper))

coef_data_final <- cbind(mean = c(NA, coef_dat[predictor %in% "period.f[2013,2017]"]$OR,
                                  NA, coef_dat[predictor %in% "HCVRNA_last_visitpositive"]$OR,
                                  NA, coef_dat[predictor %in% "age\n(50,80]"]$OR),
                         lower = c(NA, coef_dat[predictor %in% "period.f[2013,2017]"]$lower,
                                   NA, coef_dat[predictor %in% "HCVRNA_last_visitpositive"]$lower,
                                   NA, coef_dat[predictor %in% "age\n(50,80]"]$lower),
                         upper = c(NA, coef_dat[predictor %in% "period.f[2013,2017]"]$upper,
                                   NA, coef_dat[predictor %in% "HCVRNA_last_visitpositive"]$upper,
                                   NA, coef_dat[predictor %in% "age\n(50,80]"]$upper))


## ---- forest-plot-final ----
??eps
# png(filename = "manuscript/figures_tables/multiom_results_HCVRNA_last_vist.png", width = 1000, height = 1200, res = 100)
setEPS()
postscript("manuscript/figures_tables/multiom_results_HCVRNA_last_vist_May_2018.eps")
png("manuscript/results_Sept_2018/multiom_results_HCVRNA_last_vist_Sept_2018.png", width = 10, height = 6, units = "in", res = 150)
forestplot(tabtext_final, 
           coef_data_final,
           # hrzl_lines = gpar(col="#444444"),
           xlab="Adjusted Hazard Ratio (aHR) with 95% Confidence intervals",
           graph.pos = 2,
           line.margin = 0,
           boxsize=0.15,
           zero = c(0.98, 1.02), 
           new_page = TRUE,
           txt_gp = fpTxtGp(label=gpar(fontfamily="serif"), cex=1.2),
           vertices = T,
           is.summary=c(T, rep(F, 5), T, rep(F,5)),
           clip=c(-Inf,5.5), 
           col=fpColors(box="royalblue",line="darkblue", summary="royalblue"))
dev.off()

# png("../manuscript/results_Sept_2018/multiom_results_HCVRNA_last_vist_Sept_2018_RN.png", width = 10, height = 6, units = "in", res = 150)
# forestplot(tabtext_final, 
#            coef_data_final,
#            # hrzl_lines = gpar(col="#444444"),
#            xlab="Adjusted Hazard Ratio (aHR) with 95% Confidence intervals",
#            graph.pos = 2,
#            boxsize=0.15,
#            zero = c(0.98, 1.02),
#            line.margin=0,
#            new_page = TRUE,
#            txt_gp = fpTxtGp(label=gpar(fontfamily="serif"), cex=1.2),
#            vertices = T,
#            is.summary=c(T, rep(F, 5), T, rep(F,5)),
#            clip=c(-Inf,10), 
#            col=fpColors(box="royalblue",line="darkblue", summary="royalblue"))
# dev.off()

# forestplot(labeltext = tabtext_final,
#            coef_data_final,
#            is.summary = c(T, rep(F, 4), T, rep(F,4)),
#            graph.pos = 2,
#            # coef, low, high,
#            hrzl_lines = gpar(col="#444444"),
#            title="Hazard Ratio (95% CI) of Mortality",
#            # fn.ci_norm=matrix(c("fpDrawCircleCI",  "fpDrawNormalCI","fpDrawDiamondCI","fpDrawPointCI"), 
#            #                   nrow = 2, ncol=4, byrow=T),
#            zero = c(0.98, 1.02), 
#            boxsize=0.05,
#            col=fpColors(box=c("royalblue", "gold", "black","red"),
#                         line=c("darkblue", "orange", "black" ,"red"),
#                         summary=c("darkblue", "red", "black","green"),
#                         hrz_lines = "#444444"),
#            xlab="Odds ratio & 95% Confidence intervals",
#            vertices = F,
#            new_page = TRUE,
#            clip=c(0.1,3),
#            legend=unique(coef_dat$outcome),
#            legend_args = fpLegend(pos = list("bottomright"),
#                                   title="",
#                                   r = unit(0.1, "snpc"),
#                                   gp = gpar(col=0, lwd=0.0, fill = 0)))


## ---- plot-coef-results-smoke ----

fit_vglm_plot_conf_smoke <- cbind(exp(cbind(coef(fit_vglm_smoke),
                                            confint(fit_vglm_smoke))),
                            signif(summary(fit_vglm_smoke)@coef3[,4],4)) %>% 
    as.data.table(keep.rownames=T) %>% 
    tidyr::separate(rn, c("variable","outcome"), sep=":") %>% 
    magrittr::set_colnames(c("predictor","outcome","OR", 
                             "lower", "upper","p.value")) %>% 
    dplyr::mutate(outcome = factor(outcome, levels = 1:4, 
                                   labels = c("ESLD","Smoking",
                                              "Other","Unknown"))) %>% as.data.table()

fit_vglm_plot_conf_smoke[predictor %in% "period.f(2010,2015]", 
                         predictor:="period\n(2010,2015]"]
fit_vglm_plot_conf_smoke[predictor %in% "age.f(50,80]", 
                         predictor:="age\n(50,80]"]
fit_vglm_plot_conf_smoke[predictor %in% "smokesmoker", 
                         predictor:="smoker"]

a <- ggplot(fit_vglm_plot_conf_smoke[predictor %ni% c("(Intercept)","smoker")], 
       aes(x = predictor, y = OR, ymin = lower, ymax = upper)) +
    geom_pointrange(#aes(col = factor(model)), 
        position=position_dodge(width=0.30)) +
    coord_flip() +
    ylab("Hazard ratio (HR) & 95% CI") +
    geom_hline(aes(yintercept = 1), linetype = "dotted") +
    scale_color_discrete(name = "Outcome") + xlab("") + theme_bw() + 
    theme(legend.position = "bottom", axis.text.y = element_text(size=10),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    facet_grid(~outcome) + 
    geom_text(aes(label=paste0("HR = ", signif(OR,2)," [",signif(lower,2),",",
                               signif(upper,2),"]",
                               "\n     p = ", signif(p.value,2))), 
              vjust=2.0, color='black', position=position_dodge(.1),
              hjust=-0.0, size=4)

b <- ggplot(fit_vglm_plot_conf_smoke[predictor %in% c("smoker")], 
            aes(x = predictor, y = OR, ymin = lower, ymax = upper)) +
    geom_pointrange(#aes(col = factor(model)), 
        position=position_dodge(width=0.30)) +
    coord_flip() +
    ylab("Hazard ratio (HR) & 95% CI") +
    geom_hline(aes(yintercept = 1), linetype = "dotted") +
    scale_color_discrete(name = "Outcome") + xlab("") + theme_bw() + 
    theme(legend.position = "bottom", axis.text.y = element_text(size=10),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    facet_grid(~outcome) + 
    geom_text(aes(label=paste0("HR = ", signif(OR,2)," [",signif(lower,2),",",
                               signif(upper,2),"]",
                               "\n     p = ", signif(p.value,2))), 
              vjust=2.0, color='black', position=position_dodge(.1),
              hjust=-0.2, size=4)

cowplot::plot_grid(a, b, labels = c("A", "B"), ncol = 1)

## ---- outcome-dist ----
tbl <- table(droplevels(DT_final[lex.Xst %ni% "Alive"][,lex.Xst]), useNA = "ifany")
xtabOutcome <- xtable::xtable(cbind( Frequency=tbl, 
                                     "(\\%)"= signif(prop.table(tbl)*100,4)),
                              caption = "Distribution of Outcomes", 
                              label = "tab:outcome-dist", digits=c(0,0,2))

print(xtabOutcome, 
      sanitize.text.function=identity, booktabs = TRUE,
      size = "\\setlength{\\tabcolsep}{11pt}",
      latex.environments = "center",
      table.placement = "H", include.rownames = T)

## ---- outcome-dist-smoke ----
tbl <- table(droplevels(DT_smoke[lex.Xst %ni% "Alive"][,lex.Xst]), useNA = "ifany")
xtabOutcome <- xtable::xtable(cbind( Frequency=tbl, 
                                     "(\\%)"= signif(prop.table(tbl)*100,4)),
                              caption = "Distribution of Outcomes after removing individuals with missing smoking status", 
                              label = "tab:outcome-dist-smoking", digits=c(0,0,2))

print(xtabOutcome, 
      sanitize.text.function=identity, booktabs = TRUE,
      size = "\\setlength{\\tabcolsep}{11pt}",
      latex.environments = "center",
      table.placement = "H", include.rownames = T)

## ---- predicted-probs ----

# marg.counts <- tapply(DT_final$multinomOutcome, 
#                       list(DT_final$age.f,DT_final$period.f), 
#                       length)

marg.counts <- tapply(DT_final$multinomOutcome, 
                      list(DT_final$age.f,DT_final$period.f, DT_final$HIVRNA_dich, DT_final$APRI_dich, DT_final$CD4, DT_final$HCVRNA_last_visit), 
                      length)

# create table for prediction
row.names.fitted <- rev(expand.grid(dimnames(marg.counts)))


# colnames(row.names.fitted) <- c("period.f","age.f")
colnames(row.names.fitted) <- c("HCVRNA_last_visit","CD4","APRI_dich","HIVRNA_dich","period.f","age.f")
row.names.fitted <- as.data.table(row.names.fitted)
row.names.fitted <- row.names.fitted[CD4==">350 cells/ul" & APRI_dich == "<1.5" & HIVRNA_dich == "<50" | 
                                     CD4=="<350 cells/ul" & APRI_dich == ">=1.5" & HIVRNA_dich == ">=50" | 
                                     CD4==">350 cells/ul" & APRI_dich == ">=1.5" & HIVRNA_dich == "<50"]
                                         
row.names.fitted[CD4==">350 cells/ul" & APRI_dich == "<1.5" & HIVRNA_dich == "<50", group := "G1"]
row.names.fitted[CD4==">350 cells/ul" & APRI_dich == "<1.5" & HIVRNA_dich == "<50", group_name := "CD4>350, APRI<=1.5, HIVRNA<50"]

row.names.fitted[CD4=="<350 cells/ul" & APRI_dich == ">=1.5" & HIVRNA_dich == ">=50", group := "G2"]
row.names.fitted[CD4=="<350 cells/ul" & APRI_dich == ">=1.5" & HIVRNA_dich == ">=50", group_name := "CD4<350, APRI>1.5, HIVRNA>=50"]

row.names.fitted[CD4==">350 cells/ul" & APRI_dich == ">=1.5" & HIVRNA_dich == "<50", group := "G3"]
row.names.fitted[CD4==">350 cells/ul" & APRI_dich == ">=1.5" & HIVRNA_dich == "<50", group_name := "CD4>350, APRI>1.5, HIVRNA<50"]

row.names.fitted[, table(group, useNA = "always")]
# as per Nadines email March 23 2017
# She would like HCV RNA + or - analyzed with the following:
# HIV VL < 50
# APRI < 1.5
# CD4 > 350
# 
# 2. HIV VL > 50
# APRI > 1.5
# CD4 < 350

summary(fit_vglm)

# this is used below for calculating CIF
curve_names <- paste("Age", row.names.fitted[["age.f"]], "\n",
                     "Period", row.names.fitted[["period.f"]], "\n",
                     "APRI", row.names.fitted[["APRI_dich"]], "\n",
                     "CD4", row.names.fitted[["CD4"]], "\n",
                     "HCVRNA", row.names.fitted[["HCVRNA_last_visit"]], "\n",
                     "HIVRNA", row.names.fitted[["HIVRNA_dich"]], "\n",
                     sep = "")

# this is used for the plots
curve_plots <- paste(
    # "Age", row.names.fitted[["age.f"]], "\n",
                     "Period", row.names.fitted[["period.f"]], 
                     # "\n",
                     # "APRI", row.names.fitted[["APRI_dich"]], "\n",
                     # "CD4", row.names.fitted[["CD4"]], "\n",
                     # "HCVRNA ", row.names.fitted[["HCVRNA_adj"]], "\n",
                     # "HIVRNA", row.names.fitted[["HIVRNA_dich"]], "\n",
                     sep = "")

#rm(DT_probs,DT_probs_m)
DT_probs <- cbind(curve = curve_names,row.names.fitted,names_plot = curve_plots, 
               predict(fit_vglm, type = "response", 
                       newdata = row.names.fitted)) %>% 
    as.data.table


## ---- compute-CIF ----

setkey(DT_probs, curve)

# number of 6 month intervals
n_ints <- 10

for (out in c("ESLD","Smoking","Overdose","Other","Unknown")) {
    for (ints in 0:n_ints) {
        DT_probs[ , paste(out,ints,sep=":") := if (ints==0) 0 else (Alive^ints)*get(out), by = curve]
    }
}


DT_probs_m <- melt(DT_probs, id.vars = c("curve","HCVRNA_last_visit","CD4","APRI_dich","HIVRNA_dich","period.f","age.f","group",
                                         "group_name","names_plot","Alive",
                                         "ESLD","Smoking","Overdose","Other","Unknown")) %>% 
    tidyr::separate(variable, c("outcome","time"), convert = TRUE)

DT_probs_m[,CIF:=cumsum(value), by = list(curve,outcome)]


## ---- CIF-fixed-age ----

# used in manuscript
DT_probs_m[, table(outcome, useNA = "always")]
DT_probs_m[, outcome:=factor(outcome, levels = c("ESLD","Smoking","Overdose","Other","Unknown"))]
DT_probs_m[, table(outcome, useNA = "always")]

appender <- function(string) paste(ifelse(string=="positive","+","-"))
appender2 <- function(string) paste(ifelse(string=="(20,50]", "20-49", "50-80")) 


(cif_g1 <- ggplot(DT_probs_m[group == "G1"], aes(time, CIF, colour = period.f)) + 
        geom_step(size = 0.9) +
        # theme_bw() +
        facet_grid(age.f + HCVRNA_last_visit ~outcome, labeller = labeller(HCVRNA_last_visit = appender, age.f = appender2)) + 
        #facet_grid(outcome~age.f) + 
        theme(legend.position = "bottom",
              legend.title = element_blank(),
              strip.text.x = element_text(size = 14),
              strip.text.y = element_text(size = 14),
              legend.text=element_text(size=12)) + 
        scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
        xlab("") + panel_border() + scale_color_manual(values = c("deepskyblue3","deeppink4")) )


DT_probs_m[, table(group_name)]
DT_probs_m[, unique(group_name)]
DT_probs_m[, levels(group_name)]
DT_probs_m[, group_name := factor(group_name, 
                                  levels = c("CD4>350, APRI<=1.5, HIVRNA<50","CD4>350, APRI>1.5, HIVRNA<50","CD4<350, APRI>1.5, HIVRNA>=50"))]


(cif_g1 <- ggplot(DT_probs_m[outcome=="ESLD"], aes(time, CIF, colour = period.f)) + 
        geom_step(size = 0.9) +
        # theme_bw() +
        facet_grid(age.f + HCVRNA_last_visit ~ group_name, labeller = labeller(HCVRNA_last_visit = appender, age.f = appender2)) + 
        #facet_grid(outcome~age.f) + 
        theme(legend.position = "bottom",
              legend.title = element_blank(),
              strip.text.x = element_text(size = 14),
              strip.text.y = element_text(size = 14),
              legend.text=element_text(size=12)) + 
        scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
        xlab("") + panel_border() + 
        scale_color_manual(values = c("deepskyblue3","deeppink4"))
        # scale_color_manual(values = c("#009E73","#D55E00")) 
    )

# setEPS()
png(filename = "manuscript/results_May_2018/cif_ESLD_May_2018_blue_purple.png",
    width = 11, height = 8, units = "in", res = 150)
# postscript("manuscript/figures_tables/cif_ESLD.eps")
save_plot(filename = "manuscript/figures_tables/cif_ESLD.eps",plot = cif_g1)
ggsave(filename = "manuscript/figures_tables/cif_ESLD.eps", plot = cif_g1,
       width = 11, height = 8, units = "in")
cif_g1
dev.off()


(cif_g2 <- ggplot(DT_probs_m[group == "G2"], aes(time, CIF, colour = period.f)) + 
        geom_step(size = 0.9) +
        # theme_bw() +
        facet_grid(age.f + HCVRNA_last_visit ~outcome, labeller = labeller(HCVRNA_last_visit = appender, age.f = appender2)) + 
        #facet_grid(outcome~age.f) + 
        theme(legend.position = "bottom",
              legend.title = element_blank(),
              strip.text.x = element_text(size = 14),
              strip.text.y = element_text(size = 14),
              legend.text=element_text(size=12)) + 
        scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
        xlab("time (years)") + panel_border() + scale_color_manual(values = c("deepskyblue3","deeppink4")) )

(cif_g2 <- ggplot(DT_probs_m[outcome=="Smoking"], aes(time, CIF, colour = period.f)) + 
        geom_step(size = 0.9) +
        # theme_bw() +
        facet_grid(age.f + HCVRNA_last_visit ~ group_name, labeller = labeller(HCVRNA_last_visit = appender, age.f = appender2)) + 
        #facet_grid(outcome~age.f) + 
        theme(legend.position = "bottom",
              legend.title = element_blank(),
              strip.text.x = element_text(size = 14),
              strip.text.y = element_text(size = 14),
              legend.text=element_text(size=12)) + 
        scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
        xlab("") + panel_border() + scale_color_manual(values = c("deepskyblue3","deeppink4")) )

png(filename = "manuscript/figures_tables/cif_smoking.png",
    width = 11, height = 8, units = "in", res = 150)
cif_g2
dev.off()


(cif_g3 <- ggplot(DT_probs_m[group == "G3"], aes(time, CIF, colour = period.f)) + 
        geom_step(size = 0.9) +
        # theme_bw() +
        facet_grid(age.f + HCVRNA_last_visit ~outcome, labeller = labeller(HCVRNA_last_visit = appender, age.f = appender2)) + 
        #facet_grid(outcome~age.f) + 
        theme(legend.position = "bottom",
              legend.title = element_blank(),
              strip.text.x = element_text(size = 14),
              strip.text.y = element_text(size = 14),
              legend.text=element_text(size=12)) + 
        scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
        xlab("time (years)") + panel_border() + scale_color_manual(values = c("deepskyblue3","deeppink4")) )



(cif_g3 <- ggplot(DT_probs_m[outcome=="Overdose"], aes(time, CIF, colour = period.f)) + 
        geom_step(size = 0.9) +
        # theme_bw() +
        facet_grid(age.f + HCVRNA_last_visit ~ group_name, labeller = labeller(HCVRNA_last_visit = appender, age.f = appender2)) + 
        #facet_grid(outcome~age.f) + 
        theme(legend.position = "bottom",
              legend.title = element_blank(),
              strip.text.x = element_text(size = 14),
              strip.text.y = element_text(size = 14),
              legend.text=element_text(size=12)) + 
        scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
        xlab("") + panel_border() + scale_color_manual(values = c("deepskyblue3","deeppink4")) )


png(filename = "manuscript/figures_tables/cif_overdose.png",
                   width = 11, height = 8, units = "in", res = 150)
cif_g3
dev.off()

legend <- get_legend(cif_g2)
(prow <- cowplot::plot_grid(cif_g1 + theme(legend.position="none") ,cif_g2 + theme(legend.position="none"), 
                           align = 'vh',
                           labels = c("A", "B"),
                           hjust = -1,
                           vjust = 1.5,
                           nrow = 2))

# "A: CD4>350, APRI<1.5, HIVRNA_dich<50"
# "B: CD4<350, APRI>1.5, HIVRNA>50"

p_cif <- plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .05))
p_cif

# cowplot::save_plot(plot = p_cif, filename = "manuscript/figures_tables/cif_april19.png",
#                    base_width = 11, base_height = 12.5)


## ---- xtabFreq ----
xtabFreq <- xtable::xtable(DT_probs[,-1, with=F], digits = 4,
                           caption = "Estimated 6-month cause-specific conditional probabilities by age and calendar time", 
                           label = "tab:condprob")
print(xtabFreq, 
      sanitize.text.function=identity, booktabs = TRUE,
      size = "\\setlength{\\tabcolsep}{11pt}",
      latex.environments = "center",
      table.placement = "H", include.rownames = F)

## ---- xtabFreqSmoke ----
xtabFreqSmoke <- xtable::xtable(DT_probs_smoke[,-1, with=F], digits = 4,
                           caption = "Estimated 6-month cause-specific conditional probabilities by age, calendar time and smoking status", 
                           label = "tab:condprobsmoke")
print(xtabFreqSmoke, 
      sanitize.text.function=identity, booktabs = TRUE,
      size = "\\setlength{\\tabcolsep}{11pt}",
      latex.environments = "center",
      table.placement = "H", include.rownames = F)




## ---- predicted-probs-smoke ----

(marg.counts <- tapply(DT_smoke$multinomOutcome, 
                       list(DT_smoke$smoke, DT_smoke$age.f,DT_smoke$period.f), 
                       length))

# create table for prediction
(row.names.fitted <- rev(expand.grid(dimnames(marg.counts))))

colnames(row.names.fitted) <- c("period.f","age.f", "smoke")

(curve_names <- paste(row.names.fitted[,3],"\n",
                      "Age:",row.names.fitted[,2],"\n","Period:",
                      row.names.fitted[,1],sep = ""))
#rm(DT_probs,DT_probs_m)
DT_probs_smoke <- cbind(curve = curve_names,row.names.fitted, 
                        predict(fit_vglm_smoke, type = "response", 
                                newdata = row.names.fitted)) %>% 
    as.data.table


## ---- compute-CIF-smoke ----

setkey(DT_probs_smoke, curve)

# number of 6 month intervals
n_ints <- 10

for (out in c("ESLD","Smoking","Other","Unknown")) {
    for (ints in 0:n_ints) {
        DT_probs_smoke[ , paste(out,ints,sep=":") := if (ints==0) 0 else (Alive^ints)*get(out), by = curve]
    }
}


DT_probs_m_smoke <- melt(DT_probs_smoke, 
                         id.vars = c("curve", "period.f","age.f","smoke","Alive",
                                         "ESLD","Smoking","Other","Unknown")) %>%                    tidyr::separate(variable, c("outcome","time"), convert = TRUE)

DT_probs_m_smoke[,CIF:=cumsum(value), by = list(curve,outcome)]


## ---- CIF-all ----
ggplot(DT_probs_m, aes(time, CIF, colour = curve)) + 
    geom_step(size=1) +
    # theme_bw() + 
    facet_wrap(~outcome) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + panel_border()

## ---- CIF-ESLD-smoke ----
ggplot(DT_probs_m_smoke[outcome %in% "ESLD"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)")  + ylab("CIF: Death by ESLD")

## ---- CIF-ESLD-smoke-CI ----
DT_plot_CI_smoke <- fread("~/Dropbox/consulting/coco/trendsmortality/data/bootCISmoke.csv")

ggplot(DT_plot_CI_smoke[outcome %in% "ESLD"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)")  + ylab("CIF: Death by ESLD") + 
    geom_ribbon( aes( x=time, ymin=lower, ymax=upper, fill = smoke), 
                 stat="stepribbon", alpha=0.15, direction="hv" , 
                 linetype = "dotted")

## ---- CIF-Smoking-smoke ----
ggplot(DT_probs_m_smoke[outcome %in% "Smoking"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + ylab("CIF: Smoking Related Deaths")

## ---- CIF-Smoking-smoke-CI ----
ggplot(DT_plot_CI_smoke[outcome %in% "Smoking"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + ylab("CIF: Smoking Related Deaths") + 
    geom_ribbon( aes( x=time, ymin=lower, ymax=upper, fill = smoke), 
                 stat="stepribbon", alpha=0.15, direction="hv" , 
                 linetype = "dotted")

## ---- CIF-Other-smoke ----
ggplot(DT_probs_m_smoke[outcome %in% "Other"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + ylab("CIF: Death by Other Causes")

## ---- CIF-Other-smoke-CI ----
ggplot(DT_plot_CI_smoke[outcome %in% "Other"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + ylab("CIF: Death by Other Causes") + 
    geom_ribbon( aes( x=time, ymin=lower, ymax=upper, fill = smoke), 
                 stat="stepribbon", alpha=0.15, direction="hv" , 
                 linetype = "dotted")

## ---- CIF-Unknown-smoke ----
ggplot(DT_probs_m_smoke[outcome %in% "Unknown"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + ylab("CIF: Death by Unknown Causes")

## ---- CIF-Unknown-smoke-CI ----
ggplot(DT_plot_CI_smoke[outcome %in% "Unknown"], aes(time, CIF, colour = smoke)) + 
    geom_step(size = 1) +
    theme_bw() + 
    facet_grid(age.f~period.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = 0:16, labels = seq(0,8,0.5)) + 
    xlab("time (years)") + ylab("CIF: Death by Unknown Causes") + 
    geom_ribbon( aes( x=time, ymin=lower, ymax=upper, fill = smoke), 
                 stat="stepribbon", alpha=0.15, direction="hv" , 
                 linetype = "dotted")



## ---- used-in-manuscript ----

CIF_decrease <- lapply(list("ESLD", "Smoking","Overdose", "Other", "Unknown"), function(i) {

c((DT_probs_m[time==10][outcome==i][age.f=="(20,50]"][period.f=="[2003,2008]"][,CIF] -
    DT_probs_m[time==10][outcome==i][age.f=="(20,50]"][period.f=="[2009,2016]"][,CIF]) /
    DT_probs_m[time==10][outcome==i][age.f=="(20,50]"][period.f=="[2003,2008]"][,CIF],

(DT_probs_m[time==10][outcome==i][age.f=="(50,80]"][period.f=="[2003,2008]"][,CIF] -
        DT_probs_m[time==10][outcome==i][age.f=="(50,80]"][period.f=="[2009,2016]"][,CIF]) /
    DT_probs_m[time==10][outcome==i][age.f=="(50,80]"][period.f=="[2003,2008]"][,CIF])
})


names(CIF_decrease) <- c("ESLD", "Smoking","Overdose", "Other","Unknown")



## ---- CIF-fixed-age-CI ----
DT_plot_CI <- fread("~/Dropbox/consulting/coco/trendsmortality/data/bootCI.csv")
ggplot(DT_plot_CI, aes(time, CIF, colour = period.f)) + 
    geom_step(size=0.9) +
    theme_bw() +
    facet_grid(age.f~outcome) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
    xlab("time (years)") +
    geom_ribbon( aes( x=time, ymin=lower, ymax=upper, fill = period.f), 
                 stat="stepribbon", alpha=0.15, direction="hv" , 
                 linetype = "dotted")

## ---- CIF-fixed-period ----
ggplot(DT_probs_m, aes(time, CIF, colour = age.f)) + 
    geom_step(size=0.9) +
    # theme_bw() +
    facet_grid(period.f~outcome) + 
    #facet_grid(outcome~age.f) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
    xlab("time (years)") + panel_border()

## ---- CIF-fixed-period-CI ----
DT_plot_CI <- fread("~/Dropbox/consulting/coco/trendsmortality/data/bootCI.csv")
ggplot(DT_plot_CI, aes(time, CIF, colour = age.f)) + 
    geom_step(size=0.9) +
    theme_bw() +
    facet_grid(period.f~outcome) + 
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          strip.text.x = element_text(size = 14),
          strip.text.y = element_text(size = 14),
          legend.text=element_text(size=12)) + 
    scale_x_continuous(breaks = seq(0,10,2), labels = seq(0,5,1)) + 
    xlab("time (years)") +
    geom_ribbon( aes( x=time, ymin=lower, ymax=upper, fill = age.f), 
                 stat="stepribbon", alpha=0.15, direction="hv" , 
                 linetype = "dotted")
    

## ---- bootstrap ----

# the actual computation was done on HYDRA
library(doMC)
registerDoMC(cores=20)

# bootstrap replications
R <- 1000

outlist <- vector("list", R)

outlist <- foreach(i = seq(R)) %dopar% {
    DT_temp <- reSample(DT_smoke)
    multiCIFSmoke(data = DT_temp, index = i)
}

bootData <- rbindlist(outlist)

bootRes <- bootData[, list(lower=quantile(CIF, probs = 0.025),
                           upper=quantile(CIF, probs = 0.975)), 
                    by = list(curve, outcome, time)]


DT_plot_CI <- cbind(DT_probs_m_smoke, bootRes[,c("lower","upper"), with = F])

write.table(DT_plot_CI, file = "bootCISmoke.csv", sep = ",", row.names = FALSE)

fg <- fread("~/Dropbox/consulting/coco/trendsmortality/data/bootCISmoke.csv")

## ---- not-used-analysis ----
fit_reduced <- VGAM::vglm(multinomOutcome ~ age.f , 
                  family = VGAM::multinomial(refLevel = 1, whitespace = TRUE),
                  data = DT_final)

summary(fit)
summary(fit_reduced)
anova(fit_reduced,fit)
coef(fit)
residuals(fit) %>% matplot
1-pchisq((deviance(fit_reduced)-deviance(fit)), df = 4)

library(nnet)
fit2 <- nnet::multinom(multinomOutcome ~ age.f + period.f,data = DT_final)
fit3 <- nnet::multinom(multinomOutcome ~ period.f ,data = DT_final)
anova(fit2,fit3)
summary(fit2)

library(MASS)
example(birthwt)
(bwt.mu <- multinom(low ~ ., bwt))

# use fit_nnet here because for some reason, the duplicated function isnt returning
# only 4 rows
# (fitted.counts <- round(as.vector(marg.counts)*fitted(fit_nnet)[!base::duplicated(as.data.frame( fitted(fit_nnet))),],1))
# 
# data.frame(fitted.counts,row.names= apply(row.names.fitted, 1, paste, collapse = " ")) 





# make the table of all the categories.

food.labs<-factor(c("fish","invert","rep","bird","other"),levels=c("fish","invert", "rep", "bird","other"))
size.labs<-factor(c("<2.3",">2.3"),levels=c(">2.3","<2.3"))
gender.labs<-factor(c("m","f"),levels=c("m","f"))
lake.labs<-factor(c("hancock","oklawaha","trafford","george"),levels=c("george", "hancock", "oklawaha","trafford"))
alligator.table<-expand.grid(food=food.labs,size=size.labs,gender=gender.labs, lake=lake.labs)

# this is the count of number of observations in each cell.
counts<-c(7,1,0,0,5,4,0,0,1,2,16,3,2,2,3,3,0,1,2,3,2,2,0,0,1,13,7,6,0,0,3,9,1,0,2,0,1,0,1,0,3,7,1,0,1,8,6,6,3,5,2,4,1,1,4,0,1,0,0,0,13,10,0,2,2,9,0,0,1,2,3,9,1,0,1,8,1,0,0,1)

# make the "expanded" table: counts(i) copies of each cell (i).
alligator.table<-structure(.Data=alligator.table[rep(1:nrow(alligator.table),counts),], row.names=1:219)

fit4<-multinom(food~size+lake,data=alligator.table)  # L + S


# ---- Get the fitted values.
# get the marginals.
(marg.counts <- tapply(alligator.table$food, 
                      list(factor(alligator.table$size, levels = c("<2.3", ">2.3")),factor(alligator.table$lake,levels =c("hancock", "oklawaha", "trafford", "george"))), 
                      length))
# get the fitted values
(row.names.fitted <- rev(expand.grid(dimnames(marg.counts))))

# use model 4
fitted.counts<-round(as.vector(marg.counts)*fitted(fit4)[!duplicated(as.data.frame( fitted(fit4))),],1)
data.frame(fitted.counts,row.names= apply(row.names.fitted, 1, paste, collapse = " "))


# ---- predict the probability of each type of food for a certain value of "Lake" and "Size".
predict(fit4, type="probs", newdata=data.frame(size=">2.3", lake="hancock"))













