---
title: "A3: Sampling Distributions"
subtitle: "Chuhan Feng 260608446"
author: "EPIB 607, Fall 2018, McGill University"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
    toc_float: false
    number_sections: true
    toc_depth: 3
    keep_md: false
editor_options: 
  chunk_output_type: console
runtime: shiny
---

```{r include = FALSE}
## ---- Setup -----------------------------------------------------------------
knitr::opts_chunk$set(
  echo = FALSE,          # don't show code
  warning = FALSE,       # don't show warnings
  message = FALSE,       # don't show messages (less serious warnings)
  cache = FALSE,         # set to TRUE to save results from last compilation
  fig.align = "center",   # center figures
  fig.asp = 1,          # fig.aspect ratio
  fig.width = 10        # fig width
)

install.packages("mosaic", dependencies = TRUE)
library(mosaic)
library(shiny)

prob_less_2 <- mosaic::xpnorm(2)
# round to 2 digits
prob_less_2 <- round(prob_less_2, 2)

```

`r prob_less_2`
`r round(mosaic::xpnorm(2), 2)`

\newpage
# Normal probability calculations

```{r}
## ---- Question-1 ------------------------------------------------------------
Y_smallerN1.8 <- mosaic::xpnorm(q = -1.80, mean = 0, sd = 1)
Y_largerN1.8 = 1- Y_smallerN1.8

Y_smaller1.6 <- mosaic::xpnorm(q = 1.60, mean = 0, sd = 1)
Y_larger1.6 = 1 - Y_smaller1.6

Y_betweenN1.8and1.6 = Y_smaller1.6 - Y_smallerN1.8

#how to round up to only 2 decimal places?
```

P(Y < -1.80) = `r Y_smallerN1.8`
P(Y > -1.80) = `r Y_largerN1.8`

P(Y >= 1.60) = `r Y_larger1.6`
P(-1.80 < Y <= 1.60) = `Y_betweenN1.8and1.6`

\newpage
# HDL cholesterol

```{r}
## ---- Question-2 ------------------------------------------------------------
low_HDL <- mosaic::xpnorm(q = 40, mean = 55, sd = 15.5)

protective_HDL <- 1- mosaic::xpnorm(q = 60, mean = 55, sd = 15.5)

between_HDL = (1-protective_HDL) - low_HDL

percentile35 <- mosaic::xpnorm(q = 35, mean = 55, sd = 15.5)
percentile65 <- mosaic::xpnorm(q = 65, mean = 55, sd = 15.5)
newBetween = percentile65 - percentile35
```

**The percent of women have low values of HDL is:**
P(X <= 40) = `r low_HDL`

**The percent of women have protective values of HDL is:**
P(X >  60) = `r protective_HDL`

**The proportion of women has HDL in the range of 40-60 mg/dL is:**
P(40 < X <= 60) = `between_HDL`

**proportion of women has HDL in the range of 35-65 mg/dL is:**
P(35 < X <= 65) = `r newBetween`

\newpage
# Osteoporosis

```{r}
## ---- Question-3 ------------------------------------------------------------
Young_osteoprosis <- mosaic::xpnorm(q = -2.5, mean = 0, sd = 1)

Older_osteoprosis <- mosaic::xpnorm(q = -2, mean = 0, sd = 1)

Young_osteopenia1<- mosaic::xpnorm(q = -1, mean = 0, sd = 1)
Young_osteopenia2 = Young_osteoprosis
Young_osteopenia <- Young_osteopenia1 - Young_osteopenia2

Older_osteopenia = Young_osteopenia1 - Older_osteoprosis
```

####Question a
The percent of healthy young adults have osteoporos is:
P(Z<-2.5) = `r Young_osteoprosis`

####Question b
The percent of senior women adults have osteoporos is:
P(Z<-2) = `r Older_osteoprosis`

####Question c
The percent of healthy young adults have osteopenia is:
P(-2.5 <= Z < -1) = `r Young_osteopenia`

####Question d
The percent of senior women adults have osteopenia is:
P(-2 <= Z < -1) = `r Older_osteopenia`

# How deep is the ocean?

```{r}
## ---- Question-4 - --------------------------------------------------------

# NOTE: for calculating the confidence intervals, all you have to do is enter your 
# own ybar and standard error for ybar based on the sample size of 5 and sample size of 20
# the results will then get placed into a table automatically

############ Calculate the mean of the my sample ######
# a sample of 5
Latitude.n.5 <- c(-33.296,72.705,30.871,21.046,-56.158)
Longitude.n.5 <- c(-125.25,-18.457,-120.303,-171.227,117.329)

# a sample of 20
Latitude.n.20 <- c(29.339,56.736,43.645,3.066,44.976,0.316,-42.14,-23.675,-68.939,45.74,-30.024,-15.965,23.773,1.123,-44.018,-3.51,40.399,-46.075,2.406,5.147)
Longitude.n.20 <- c(-157.641,-79.517,-152.192,130.696,123.478,-155.615,88.845,26.757,125.744,21.611,-26.697,159.607,14.514,-90.077,23.513,30.518,-121.704,125.773,-150.403,-116.11)

index.n.20 <- c(556,557,558,559,560,561,562,563,564,565,
                566,567,568,569,570,571,572,573,574,575)

source("https://github.com/sahirbhatnagar/EPIB607/raw/master/exercises/water/automate_water_task.R")

#average depth of the ocean
index.n.5 <- c(551,552,553,554,555)
automate_water_task(index = index.n.5)

depths.n.5 <- automate_water_task(index = index.n.5, student_id = 260608446, type = "depth")

depths.n.20 <- automate_water_task(index = index.n.20, student_id = 260608446, type = "depth")

mean_ofsample5 <- mean(depths.n.5$alt)
mean_ofsample20 <- mean(depths.n.20$alt)

#Not sure here
sd_ofsample5 <- sd(depths.n.5$alt)
sd_ofsample20 <- sd(depths.n.20$alt)

#Standard Error
SE_ofsample5 <- sd_ofsample5 / sqrt(5)
SE_ofsample20 <- sd_ofsample20 / sqrt(20)

############ Edit the values below #################

# ybar based on n=5
ybar.n5 <- mean_ofsample5

# Standard Error of ybar based on n=5
SEybar.n5 <- SE_ofsample5

# ybar based on n=20
ybar.n20 <- mean_ofsample20

# Standard Error of ybar based on n=20
SEybar.n20 <- SE_ofsample20
###################################################


# DO NOT EDIT  BELOW THIS LINE
# 68% CI
ci68.n5 <- ybar.n5 + c(-1,1) * SEybar.n5
# 95% CI
ci95.n5 <- ybar.n5 + c(-2,2) * SEybar.n5
# 99% CI
ci99.n5 <- ybar.n5 + c(-3,3) * SEybar.n5

# 68% CI
ci68.n20 <- ybar.n20 + c(-1,1) * SEybar.n20
# 95% CI
ci95.n20 <- ybar.n20 + c(-2,2) * SEybar.n20
# 99% CI
ci99.n20 <- ybar.n20 + c(-3,3) * SEybar.n20
```


The results are shown in the Table below:

|Level  |Mean (CI)  for $n=5$            |       Mean (CI)  for $n=20$        |
|:----|:----------------------------------|:----------------------------------|
|68\% |`r sprintf("%#.2f (%#.2f, %#.2f)", ybar.n5, ci68.n5[1], ci68.n5[2])` | `r sprintf("%#.2f (%#.2f, %#.2f)", ybar.n20, ci68.n20[1], ci68.n20[2])`    |
|95\% |`r sprintf("%#.2f (%#.2f, %#.2f)", ybar.n5, ci95.n5[1], ci95.n5[2])` | `r sprintf("%#.2f (%#.2f, %#.2f)", ybar.n20, ci95.n20[1], ci95.n20[2])`    |
|99\% |`r sprintf("%#.2f (%#.2f, %#.2f)", ybar.n5, ci99.n5[1], ci99.n5[2])` | `r sprintf("%#.2f (%#.2f, %#.2f)", ybar.n20, ci99.n20[1], ci99.n20[2])`    |


####Question a
1. smaple mean (n=5): `r mean_ofsample5`
   sample mean (n=20): `r mean_ofsample20`

2. standard error of the sample mean (n=5): `r sd_ofsample5`
   standard error of the sample mean (n=20): `r sd_ofsample20`

####Question b
1. sample (n=5)
   68% CI: `r ci68.n5`
   95% CI: `r ci95.n5`
   99% CI: `r ci99.n5`
   
2. sample (n=20)
   68% CI: `r ci68.n20`
   95% CI: `r ci95.n20`
   99% CI: `r ci99.n20`
   
####Question c
Q: What do you notice about the size of the three intervals for a given sample size?

A: For a given sample size, when percentage of confidence increases, the widness of interval range also increases. For example, for a sample size of 5, the interval size of 99% confidence interval (C.I.) is over 5000 whereas the interval size of 68% C.I. is below 2000. 



# Code {-}

```{r all-code, ref.label=knitr::all_labels(), echo = TRUE, eval = FALSE}

```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately. 

To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.

```{r eruptions, echo=FALSE}
inputPanel(
  selectInput("n_breaks", label = "Number of bins:",
              choices = c(10, 20, 35, 50), selected = 20),
  
  sliderInput("bw_adjust", label = "Bandwidth adjustment:",
              min = 0.2, max = 2, value = 1, step = 0.2)
)

renderPlot({
  hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
       xlab = "Duration (minutes)", main = "Geyser eruption duration")
  
  dens <- density(faithful$eruptions, adjust = input$bw_adjust)
  lines(dens, col = "blue")
})
```

## Embedded Application

It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:

```{r tabsets, echo=FALSE}
shinyAppDir(
  system.file("examples/06_tabsets", package = "shiny"),
  options = list(
    width = "100%", height = 550
  )
)
```

Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.

You can also use the `shinyApp` function to define an application inline rather then in an external directory.

In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.



