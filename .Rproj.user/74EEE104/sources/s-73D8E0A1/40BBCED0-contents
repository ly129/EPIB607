#' @description Script to impute missing platelets and ventilation in validation
#'   cohort, by using NSQIP
#'
#'

# rm(list=ls())
# source("bin/functions.R")
# source("bin/packages.R")
# set.seed(123456)


# NSQIP -------------------------------------------------------------------

DT <- readRDS(file = "~/Dropbox/consulting/maria/data/acs_nsqip_puf05-15_cdiff_emergencyrealTAC_May30_ASA3+.rds")
DT <- as.data.table(DT)

col.names <- c("death", "numage", "prcreat", "preopaki",
               "pralbum", "prwbc", "prplate", "preopventilat", "fsteroid",
               "preopsepsis", "mortprcomb")
rm.colnames <- colnames(DT)[colnames(DT) %ni% col.names]
DT[, (rm.colnames) := NULL]
DT[preopsepsis %in% c(0,1,2), preopsepsis := 0]
DT[preopsepsis %in% c(3), preopsepsis := 1]

DT[, `:=`(deathn = death,
          death = factor(death, levels = c(0,1), labels = c("Alive","Dead")),
          cohort = "NSQIP",
          #preopdialysis = factor(preopdialysis, levels = c(0,1), labels = c("No Preop Dialysis","Preop Dialysis")),
          preopventilat = factor(preopventilat, levels = c(0,1), labels = c("Not Ventilated", "Ventilated")),
          preopsepsis = factor(preopsepsis, levels = c(0,1), labels = c("No Shock","Shock")),
          fsteroid = factor(fsteroid, levels = c(0,1), labels = c("Non-immunosuppressed","Immunosuppressed")),
          preopaki = factor(preopaki, levels = c(0,1), labels = c("No Preop Aki", "Preop Aki"))
)]

set.seed(123)
DT[is.na(numage), numage:=runif(.N, min = 89, max = 92)]
DT[, table(numage, useNA = "always")]
df_NSQIP <- as.data.frame(DT)



# Validation --------------------------------------------------------------

DT_val <- readRDS(file = "~/Dropbox/consulting/maria/data/Validation Cohort colectomy only.rds")
DT_val <- as.data.table(DT_val)

val_vars <- c("AGE",
              "CREPREOP", # Creatinine
              "ALBCOLECT", # Albumin
              "GBPREOP", # WBC
              "IRA", # preopaki
              "IMMUNO", # fsteroid
              "CHOCVOLUME", # sepsis
              "AMIPREOP", # sepsis
              "RAISONCHX", # sepsis
              "DCD30") #death

all(val_vars %in% colnames(DT_val))
rm.colnames <- colnames(DT_val)[colnames(DT_val) %ni% val_vars]

DT_val[, (rm.colnames) := NULL]

DT_val[, `:=`(CREPREOP = CREPREOP * 0.0113)]
DT_val[, `:=`(ALBCOLECT = ALBCOLECT * 0.1)]

DT_val[, preopsepsis := 0]
DT_val[CHOCVOLUME == "Y" | AMIPREOP == 1 | RAISONCHX == 4, preopsepsis := 1]

DT_val[, `:=`(deathn = DCD30,
              death = factor(DCD30, levels = c(0,1), labels = c("Alive","Dead")),
              #preopdialysis = factor(preopdialysis, levels = c(0,1), labels = c("No Preop Dialysis","Preop Dialysis")),
              preopventilat = NA,
              prplate = NA,
              mortprcomb = runif(.N), # just a placeholder for merging with df_imp, not used
              cohort = "Validation",
              preopsepsis = factor(preopsepsis, levels = c(0,1), labels = c("No Shock","Shock")),
              fsteroid = factor(IMMUNO, levels = c("N","Y"), labels = c("Non-immunosuppressed","Immunosuppressed")),
              preopaki = factor(IRA, levels = c(0,1), labels = c("No Preop Aki", "Preop Aki")))]
DT_val

setnames(DT_val, old = c("AGE","CREPREOP","ALBCOLECT", "GBPREOP"),
         new = c("numage", "prcreat","pralbum", "prwbc"))


colnames(DT_val)[which(colnames(DT_val) %in% colnames(df_NSQIP))]

rm.colnames <- c("IMMUNO", "IRA","DCD30", "RAISONCHX","AMIPREOP","CHOCVOLUME")

DT_val[, (rm.colnames) := NULL]

all(colnames(DT_val) %in% colnames(df_NSQIP))
all(colnames(df_NSQIP) %in% colnames(DT_val))

DT_val
df_NSQIP

setcolorder(DT_val, colnames(df_NSQIP))


colnames(DT_val)==colnames(df_NSQIP)

colnames(DT_val)
colnames(df_NSQIP)

DT_all <- rbind(df_NSQIP, as.data.frame(DT_val))





# Imputation --------------------------------------------------------------

# imp <- mice::mice(DT_all, m = 1, maxit = 1, seed = 123456)
imp <- mice::mice(DT_all, seed = 123456)
# plot(imp)
complete(imp, action = "long", include = TRUE) %>% str
# extract the data in long format
DT_imp <- as.data.table(complete(imp, action = "long", include = TRUE))
DT_imp[.imp==0][, table(prwbc, useNA = "always")]
DT_imp[.imp==1][, table(prwbc, useNA = "always")]

# DT_imp <- DT_imp[.imp==1]
DT_imp[, table(.imp)]
DT_imp[, numagef := cut(numage, breaks = c(min(numage, na.rm = T),50, 60, 70, 80, max(numage, na.rm = T)),
                        include.lowest = TRUE, labels = c("[18,50]","(50,60]", "(60,70]", "(70,80]", "(80, 89]"))]
DT_imp[, table(numagef, useNA = "always")]

DT_imp[, pralbumf := cut(pralbum, breaks = c(min(pralbum, na.rm = T), 1.5, 3, max(pralbum, na.rm = T)), include.lowest = TRUE,
                         labels = c("[1,1.5]","(1.5,3]","(3,4.6]"))]
DT_imp[, table(pralbumf, useNA = "always")]

DT_imp[, prwbcf := cut(prwbc, breaks = c(min(prwbc, na.rm = T), 4, 20, 50, max(prwbc, na.rm = T)), include.lowest = TRUE,
                       labels = c("[0.1,4]","(4,20]","(20,50]","(50,124.3]"))]
DT_imp[, table(prwbcf, useNA = "always")]

DT_imp[, prcreatf := cut(prcreat, breaks = c(min(prcreat, na.rm = T), 1.13, 2.26, max(prcreat, na.rm = T)), include.lowest = TRUE,
                         labels = c("[0.3,1.13]","(1.13,2.26]","(2.26,8.7]"))]
DT_imp[, table(prcreatf, useNA = "always")]

DT_imp[, prplatef := cut(prplate, breaks = c(min(prplate, na.rm = T), 150, max(prplate, na.rm = T)), include.lowest = TRUE,
                         labels = c("[17,150]","(150,996]"))]
DT_imp[, table(prplatef, useNA = "always")]



DT_NSQIP_imp <- as.data.frame(DT_imp[cohort=="NSQIP"], stringsAsFactors = FALSE)
# rm(DT_val)
DT_val_imp <- as.data.frame(DT_imp[cohort=="Validation"], stringsAsFactors = FALSE)


# fm_poly_age_creat_pral <- as.formula(paste0("deathn ~ ",
#                                             paste(c("preopventilat","preopsepsis","fsteroid",
#                                                     "prwbcf","prplatef",
#                                                     "poly(prcreat,2)","poly(numage,2)","poly(pralbum,2)"),
#                                                   collapse = "+")))
#
# fit <- with(data = as.mids(DT_NSQIP), exp = glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                   poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial"))
#
#
# # For each of the 5 multiply imputed NSQIP datasets, we get a prediction on one of the imputed validation sets
# # we repeat this for each of the 5 multiply imputed validation sets
# fit1 <- with(data = as.mids(DT_NSQIP), exp = predict(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                   poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial"),
#                                                   type = "response", newdata = subset(DT_val, .imp==1)))
# fit2 <- with(data = as.mids(DT_NSQIP), exp = predict(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                            poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial"),
#                                                      type = "response", newdata = subset(DT_val, .imp==2)))
# fit3 <- with(data = as.mids(DT_NSQIP), exp = predict(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                            poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial"),
#                                                      type = "response", newdata = subset(DT_val, .imp==3)))
# fit4 <- with(data = as.mids(DT_NSQIP), exp = predict(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                            poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial"),
#                                                      type = "response", newdata = subset(DT_val, .imp==4)))
# fit5 <- with(data = as.mids(DT_NSQIP), exp = predict(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                            poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial"),
#                                                      type = "response", newdata = subset(DT_val, .imp==5)))
#
# c(do.call(c,lapply(fit1$analyses, function(i) as.numeric(roc(subset(DT_val, .imp == 1)$deathn,i)$auc))),
# do.call(c,lapply(fit2$analyses, function(i) as.numeric(roc(subset(DT_val, .imp == 2)$deathn,i)$auc))),
# do.call(c,lapply(fit3$analyses, function(i) as.numeric(roc(subset(DT_val, .imp == 3)$deathn,i)$auc))),
# do.call(c,lapply(fit4$analyses, function(i) as.numeric(roc(subset(DT_val, .imp == 4)$deathn,i)$auc))),
# do.call(c,lapply(fit5$analyses, function(i) as.numeric(roc(subset(DT_val, .imp == 5)$deathn,i)$auc)))) %>% mean
#
#
#
# fit_AIC <- with(data = as.mids(DT_NSQIP), exp = AIC(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                   poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial")))
#
# fit_BIC <- with(data = as.mids(DT_NSQIP), exp = BIC(glm(deathn ~ preopventilat + preopsepsis + fsteroid + prwbcf + prplatef +
#                                                       poly(prcreat, 2) + poly(numage, 2) + poly(pralbum, 2), family = "binomial")))
#
# do.call(mean, fit_AIC$analyses)
# do.call(mean, fit_BIC$analyses)
#
#
# summary(fit) %>% str
#
# str(fit)
#
# str(DT_val)
#
#
#
